/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/v2/associateAccount": {
    /** Associates the customer's account with the payment processor to the Google instrument being added. Account association happens after the integrator has authenticated the user. Association occurs via a server-to-server call that contains the `requestId` for the associated authentication flow (`authenticationRequestId`), an `associationId` and a `googlePaymentToken` (GPT). The payment processor should associate the `associationId` and the `googlePaymentToken` to the customer's account for authentication. The GPT is used to initiate payments. The `associationId` is used during re-authentication calls to identify the account for authentication. If Google sends an `associationId` or a `googlePaymentToken` that the integrator has already seen during a different association, then it throws an error. An example request looks like: { "requestHeader": { "protocolVersion": { "major": 2 }, "requestId": "bWVyY2hhbnQgdHJhbnNhY3Rpb24gaWQ", "requestTimestamp": { "epochMillis": "1502220196077" }, "paymentIntegratorAccountId": "InvisiCashUSD" }, "authenticationRequestId": "bnAxdWTydDX==", "googlePaymentToken": { "issuerId": { "value": "InvisiCashUSA" }, "token": "ZXhhbXBsZSB1bmlxdWUgcGF5bWVudCB0b2tlbiB2YWx1ZQ" }, "associationId": "LmddbXBsZSByZWZlcmVuY2UgdG9rZW4gdmFsdWU", "provideUserInformation": true } An example response looks like: { "responseHeader": { "responseTimestamp": { "epochMillis": "1481900013178" } }, "result": { "success": { "bankAccountIdentifier": { "singaporeBankAccount": { "sgFastBankAccount": { "localAccountNumber": "113A", "swiftBic": { "value": "COBADEFF478" } }, "localBankIdentifier":{ "localBankCode": "7171", "localBranchCode": "060" } } }, "bankAccountDetails" : { "accountNumberSuffix": "1234", "bankAccountType": { "type": "SAVINGS" }, "bankAccountMetadata": { } }, "transactionLimits": { "transactionMaxLimit": { "noLimit": {} } }, "userInformation": { "name": "Example Customer", "addressLine": ["70 Pasir Panjang Rd"], "localityName": "#03-71", "postalCodeNumber": "117371", "countryCode": "SG" } } } } */
    post: operations["AssociateAccount"];
  };
  "/v2/associateAccountWithVendorGeneratedToken": {
    /** Associates the customer's account with the payment processor to the Google instrument being added. Account association happens after the integrator has authenticated the user. Association occurs via a server-to-server call that contains the `requestId` for the associated authentication flow (`authenticationRequestId`) and an `associationId`.The payment processor should associate the `associationId` to the customer's account. The `associationId` is used during re-authentication calls to identify the account for authentication. If Google sends an `associationId` that the integrator has already seen during a different association, then it throws an error. In the response, the payment processor generates a 'vendorPaymentToken' which is bound to the customer's account and is used for authorizing subsequent payments. An example request looks like: { "requestHeader": { "protocolVersion": { "major": 2 }, "requestId": "bWVyY2hhbnQgdHJhbnNhY3Rpb24gaWQ", "requestTimestamp": { "epochMillis": "1502220196077" }, "paymentIntegratorAccountId": "InvisiCashUSD" }, "authenticationRequestId": "bnAxdWTydDX==", "associationId": "LmddbXBsZSByZWZlcmVuY2UgdG9rZW4gdmFsdWU_", "provideUserInformation": true } An example response looks like: { "responseHeader": { "responseTimestamp": { "epochMillis": "1481900013178" } }, "result": { "success": { "vendorPaymentToken": "ZXhhbXBsZSB1bmlxdWUgcGF5bWVudCB0b2tlbiB2YWx1ZQ", "tokenExpirationTime": { "epochMillis": "1481919332394" }, "bankAccountIdentifier": { "singaporeBankAccount": { "sgFastBankAccount": { "localAccountNumber": "113A", "swiftBic": { "value": "COBADEFF478" } }, "localBankIdentifier":{ "localBankCode": "7171", "localBranchCode": "060" } } }, "bankAccountDetails" : { "accountNumberSuffix": "1234", "bankAccountType": { "type": "SAVINGS" }, "bankAccountMetadata": { } }, "transactionLimits": { "transactionMaxLimit": { "noLimit": {} } }, "userInformation": { "name": "Example Customer", "addressLine": ["70 Pasir Panjang Rd"], "localityName": "#03-71", "postalCodeNumber": "117371", "countryCode": "SG" } } } } */
    post: operations["AssociateAccountWithVendorGeneratedToken"];
  };
  "/v2/disassociateAccount": {
    /** Deletes the association between the customer's account with the payment processor and the Google instrument. This disassociation should be processed idempotently, so if the same requestId is used as a previously processed request, the previous result should be idempotently returned. Otherwise if Google sends a `googlePaymentToken` that has already been disassociated, an error should be returned. An example request looks like: { "requestHeader": { "protocolVersion": { "major": 2 }, "requestId": "bWVyY2hhbnQgdHJhbnNhY3Rpb24gaWQ", "requestTimestamp": { "epochMillis": "0" }, "paymentIntegratorAccountId": "InvisiCashUSD" }, "googlePaymentToken": { "issuerId": { "value": "InvisiCashUSA" }, "token": "ZXhhbXBsZSB1bmlxdWUgcGF5bWVudCB0b2tlbiB2YWx1ZQ" } } An example response looks like: { "responseHeader": { "responseTimestamp": { "epochMillis": "1481900013178" } }, "result": {"success": {}} } */
    post: operations["DisassociateAccount"];
  };
  "/v3/transferFunds": {
    /** Initiates money movement between a customer's account held with Google and the payment processor. The combination of `requestId` within the header and `paymentIntegratorAccountId` is the idempotency key and uniquely identifies this transaction. All mutations on this transaction (refunds) populate the `requestId` value in the `capture_request_id` field. An example request looks like: { "requestHeader": { "protocolVersion": { "major": 2 }, "requestId": "bWVyY2hhbnQgdHJhbnNhY3Rpb24gaWQ", "requestTimestamp": { "epochMillis": "1502220196077" }, "paymentIntegratorAccountId": "InvisiCashUSA_USD" }, "googlePaymentToken": { "issuerId": { "value": "Mojaloop" }, "token": "ZXhhbXBsZSB1bmlxdWUgcGF5bWVudCB0b2tlbiB2YWx1ZQ" }, "transactionDescription": "Google - Music", "amount": { "amountMicros": "728000000", "currencyCode": "INR" }, "destinationBankAccount": { "bankAccountId": { "accountNumber": { "localAccountNumber": "1234-5678-91" }, "swiftBic": "XXXXSGS0XXX" }, "bankAccountOwner": { "name": "Sam User" } }, "transferFundsContext": {} } An example response looks like: { "responseHeader": { "responseTimestamp": { "epochMillis": "1481900013178" } }, "result": {"success": {}}, "paymentIntegratorTransactionId": "aW50ZWdyYXRvciB0cmFuc2FjdGlvbiBpZA" } */
    post: operations["TransferFunds"];
  };
  "/v3/getTransferFundsQuotation": {
    /** getTransferFundsQuotation. The goal of this RPC is to obtain the relevant information about a transfer to present those details to the user for their evaluation. The evaluation criteria can be presented in the form of a set of challenges, such as: 1) Acknowledgement of the resolved identity of the payee proxy; Note: we will omit this for the first iteration; we assume that payee proxy lookup has already been performed in a previous GetPayeeProxyDisplayInfo call. 2) Agreement to quoted transfer parameters, including calculated transfer fees, 3) Re-authentication or 2FA, e.g. OTP. If the user approves of the terms of a transfer, a subsequent TransferFunds call is made. An example request looks like: { "requestHeader": { "protocolVersion": { "major": 2 }, "requestId": "bWVyY2hhbnQgdHJhbnN", "requestTimestamp": { "epochMillis": "1502220196077" }, "paymentIntegratorAccountId": "Mojaloop" }, "associationId": "ZXhhbXBsZSB1bmlxdWUgcGF5bWVudC", "transactionDescription": "Payment", "amount": { "amountMicros": "5000000", "currencyCode": "SGD" }, "payeeProxy": { "payeeProxyKey": { "networkId": "paynow", "phoneNumber": "+6577778888" }, "payeeProxyLookupRequestId": "bWVyY2hhbnQgdHJhbnN" } } */
    post: operations["GetQuotation"];
  };
  "/v2/disburse": {
    /** This method performs a disburse from a Google-owned bank account to an account specified in the request. */
    post: operations["Disburse"];
  };
  "/v2/getTransferFundsTransactionStatus": {
    /** This method fetches the status of a TransferFunds transaction. */
    post: operations["GetTransferFundsTransactionStatus"];
  };
  "/v2/getDisburseTransactionStatus": {
    /** This method fetches the status of a disburse transaction. */
    post: operations["GetDisburseTransactionStatus"];
  };
  "/v2/getPayeeProxyRegistrationStatus": {
    /** Checks whether or not a mapping to a Payee has been registered for the specified proxy key. An example request looks like: { "requestHeader": { "protocolVersion": { "major": 2 }, "requestId": "bWVyY2hhbnQgdHJhbnNhY3Rpb24gaWQ", "requestTimestamp": { "epochMillis": "1502220196077" }, "paymentIntegratorAccountId": "InvisiCashUSA_USD" }, "proxyKey": { "phoneNumber": "+001234567890" } } An example response looks like: { "responseHeader": { "responseTimestamp": { "epochMillis": "1481900013178" } }, "registrationStatus": "REGISTERED" } */
    post: operations["GetPayeeProxyRegistrationStatus"];
  };
  "/v2/getPayeeProxyDisplayInfo": {
    /** Returns the display data that has been registered for the specified proxy key (e.g. display name to be shown before payment) An example request looks like: { "requestHeader": { "protocolVersion": { "major": 2 }, "requestId": "bWVyY2hhbnQgdHJhbnNhY3Rpb24gaWQ", "requestTimestamp": { "epochMillis": "1502220196077" }, "paymentIntegratorAccountId": "InvisiCashUSA_USD" }, "proxyKey": { "phoneNumber": "+001234567890" } } An example response looks like: { "responseHeader": { "responseTimestamp": { "epochMillis": "1481900013178" } }, "displayInfoResult": { "success": { "displayInfo": { "displayName": "Sam Payee" } } } } */
    post: operations["GetPayeeProxyDisplayInfo"];
  };
}

export interface components {
  schemas: {
    /** @description Request object for the associate account method. */
    AssociateAccountRequest: {
      requestHeader?: components["schemas"]["GoogleStandardpaymentsTypesV2RequestHeader"];
      /** @description `requestId` of the authentication request that preceded this call. This identifier was generated by Google during the authentication flow. This is only present if the user went through the Android app authentication, web authentication, or an asynchronous authentication method that uses `authenticationResultNotification`. */
      authenticationRequestId?: string;
      /** @description **REQUIRED**: True if we desire the integrator to provide the address associated with this account. */
      provideUserInformation?: boolean;
      googlePaymentToken?: components["schemas"]["GoogleStandardpaymentsTypesV2GooglePaymentToken"];
      /** @description **REQUIRED**: The identifier of this association. This identifier is created by Google and is sent during re-authentication flows to identify which account should be authenticated. This is a string that has a maximum length of 100 characters. */
      associationId?: string;
    };
    /** @description Header object that is defined on all requests sent to the server. */
    GoogleStandardpaymentsTypesV2RequestHeader: {
      /** @description **REQUIRED**: Unique identifier of this request. This is a string that has a max length of 100 characters, and contains only the characters "a-z", "A-Z", "0-9", ":", "-", and "_". */
      requestId?: string;
      requestTimestamp?: components["schemas"]["GoogleStandardpaymentsTypesV2Timestamp"];
      protocolVersion?: components["schemas"]["GoogleStandardpaymentsTypesV2Version"];
      /** @description **REQUIRED**: Identifies a unique account with contractual constraints. */
      paymentIntegratorAccountId?: string;
    };
    /** @description A timestamp object representing a point on the ISO timeline in milliseconds since the Unix epoch. */
    GoogleStandardpaymentsTypesV2Timestamp: {
      /** @description Milliseconds since the Unix epoch */
      epochMillis?: string;
    };
    /** @description Version object contains the major version of the API. Versions of the same major version are guaranteed to be compatible. The integrator must support all requests for the same major version. */
    GoogleStandardpaymentsTypesV2Version: {
      /** @description **REQUIRED**: Major version. This is marked for compatibility requests with different versions are not guaranteed to be compatible. */
      major?: number;
    };
    /** @description Describes a GooglePaymentToken (GPT), including the token and the issuer of the backing user account. */
    GoogleStandardpaymentsTypesV2GooglePaymentToken: {
      issuerId?: components["schemas"]["GoogleStandardpaymentsTypesV2IssuerId"];
      /** @description **REQUIRED**: This is the token that both companies will use to identify the account for purchases between each other. */
      token?: string;
    };
    /** @description A unique identifier for an issuer of user accounts. */
    GoogleStandardpaymentsTypesV2IssuerId: {
      /** @description **REQUIRED**: The string value of the identifier. This unique identifier is defined by Google. Google will share a list with the identifiers for all external issuers available via the payment integrator. */
      value?: string;
    };
    /** @description Response object for the associate account method. */
    AssociateAccountResponse: {
      responseHeader?: components["schemas"]["GoogleStandardpaymentsTypesV2ResponseHeader"];
      result?: components["schemas"]["AssociateAccountResponseAssociateAccountResult"];
    };
    /** @description Header object that is defined on all responses sent from the server. */
    GoogleStandardpaymentsTypesV2ResponseHeader: {
      responseTimestamp?: components["schemas"]["GoogleStandardpaymentsTypesV2Timestamp"];
    };
    AssociateAccountResponseAssociateAccountResult: {
      success?: components["schemas"]["AssociateAccountResponseAssociateAccountResultSuccessDetails"];
      userAuthenticationFailed?: components["schemas"]["GoogleStandardpaymentsTypesV2Empty"];
      notEligible?: components["schemas"]["GoogleStandardpaymentsTypesV2Empty"];
      otpNotMatched?: components["schemas"]["GoogleStandardpaymentsTypesV2Empty"];
      otpAlreadyUsed?: components["schemas"]["GoogleStandardpaymentsTypesV2Empty"];
      otpLimitReached?: components["schemas"]["GoogleStandardpaymentsTypesV2Empty"];
    };
    AssociateAccountResponseAssociateAccountResultSuccessDetails: {
      associatedAccountIdentifier?: components["schemas"]["AssociatedAccountIdentifier"];
      bankAccountIdentifier?: components["schemas"]["GoogleStandardpaymentsTypesV2BankAccountIdentifier"];
      associatedAccountDetails?: components["schemas"]["AssociatedAccountDetails"];
      bankAccountDetails?: components["schemas"]["MaskedBankAccountDetails"];
      transactionLimits?: components["schemas"]["TransactionLimits"];
      userInformation?: components["schemas"]["GoogleStandardpaymentsTypesV2UserInformation"];
    };
    AssociatedAccountIdentifier: {
      /** @description **REQUIRED**: The account ID the user has with the integrator. This is used for Google risk to understand account re-use and account relationships and Google customer operation agents to help customers diagnose issues. This value must be immutable for the life of the account. */
      accountId?: string;
    };
    /** @description Unique identifier of a bank account. */
    GoogleStandardpaymentsTypesV2BankAccountIdentifier: {
      singaporeBankAccount?: components["schemas"]["GoogleStandardpaymentsTypesV2SgBankAccount"];
      usBankAccount?: components["schemas"]["GoogleStandardpaymentsTypesV2UsBankAccount"];
      japanBankAccount?: components["schemas"]["GoogleStandardpaymentsTypesV2JapanBankAccount"];
    };
    /** @description Details of a user's bank account in SG. */
    GoogleStandardpaymentsTypesV2SgBankAccount: {
      sgFastBankAccount?: components["schemas"]["GoogleStandardpaymentsTypesV2SgFastBankAccount"];
      localBankIdentifier?: components["schemas"]["GoogleStandardpaymentsTypesV2SgLocalBankIdentifier"];
    };
    /** @description Details of a customer's bank account in SG that are relevant for operations that involve the FAST payment network. */
    GoogleStandardpaymentsTypesV2SgFastBankAccount: {
      /** @description The local account number for this account. */
      localAccountNumber?: string;
      swiftBic?: components["schemas"]["GoogleStandardpaymentsTypesV2SwiftBusinessIdentifierCode"];
    };
    /** @description SWIFT Business Identifier Code as defined in ISO 9362. */
    GoogleStandardpaymentsTypesV2SwiftBusinessIdentifierCode: {
      /** @description An 8-character code, defined as 'business party identifier', consisting of the business party prefix (4 alphanumeric), the country code as defnied in ISO 3166-1 (2 alphabetic), and the business party suffix (2 alphanumeric). The branch identifier is a 3-character optional element that can supplement the 8-character BIC, used to identify specific location, departments, services or units of the same business party. */
      value?: string;
    };
    /** @description Local Ids for a bank in Singapore. */
    GoogleStandardpaymentsTypesV2SgLocalBankIdentifier: {
      /** @description Bank code of the customer bank. */
      localBankCode?: string;
      /** @description Code of the branch where the customer account is located. */
      localBranchCode?: string;
    };
    /** @description Details of a user's bank account in the US. */
    GoogleStandardpaymentsTypesV2UsBankAccount: {
      accountNumber?: components["schemas"]["GoogleStandardpaymentsTypesV2DomesticBankAccountNumber"];
      bankIdentifier?: components["schemas"]["GoogleStandardpaymentsTypesV2UsBankIdentifier"];
    };
    /** @description Local representation of a bank account number for domestic transfers. */
    GoogleStandardpaymentsTypesV2DomesticBankAccountNumber: {
      /** @description The local bank account number. */
      number?: string;
    };
    /** @description Identifiers for a Bank in the United States. */
    GoogleStandardpaymentsTypesV2UsBankIdentifier: {
      swiftBic?: components["schemas"]["GoogleStandardpaymentsTypesV2SwiftBusinessIdentifierCode"];
      usAbaRoutingNumber?: components["schemas"]["GoogleStandardpaymentsTypesV2AbaRoutingTransitNumber"];
    };
    /** @description An American Bankers Association (ABA) routing transit number (ABA RTN). */
    GoogleStandardpaymentsTypesV2AbaRoutingTransitNumber: {
      /** @description ABA routing transit number. */
      value?: string;
    };
    /** @description Details of a user's bank account in Japan. */
    GoogleStandardpaymentsTypesV2JapanBankAccount: {
      /** @description Local account number for the bank account. */
      localAccountNumber?: string;
      localBankIdentifier?: components["schemas"]["GoogleStandardpaymentsTypesV2JapanLocalBankIdentifier"];
    };
    /** @description Local IDs for a bank in Japan. */
    GoogleStandardpaymentsTypesV2JapanLocalBankIdentifier: {
      /** @description Bank code of the customer bank. */
      localBankCode?: string;
      /** @description Code of the branch where the customer account is located. */
      localBranchCode?: string;
    };
    AssociatedAccountDetails: {
      accountNickname?: components["schemas"]["AssociatedAccountNickname"];
      accountAlias?: components["schemas"]["GoogleStandardpaymentsTypesTokenizedFopV2AccountAlias"];
      accountType?: components["schemas"]["AccountType"];
    };
    AssociatedAccountNickname: {
      /** @description String by which the user knows this account for display purposes. This is a suffix of the account nickname. For example last four digits of a phone number. Google will indicate in the user interface that this is only a suffix of the nickname. *Caution:* This value can be PII, but must never be SPII. This value will be displayed in UIs like the purchase flow to allow the user to distinguish between payment methods. *Note:* that either this value or the `full_account_nickname` must be present, never both. */
      partialAccountNickname?: string;
      /** @description String by which the user knows this account for display purposes. Unlike `account_nickname` this is the full account nickname. For example `56565-56501` for a phone number or sally@sample-email.com for an email identity. *Caution:* This value can be PII, but must never be SPII. This value will be displayed in UIs like the purchase flow to allow the user to distinguish between payment methods. *Note:* that either this value or the `account_nickname` must be present, never both. */
      fullAccountNickname?: string;
    };
    /** @description Defines the type and value of an alias that a user associates with their vendor account. */
    GoogleStandardpaymentsTypesTokenizedFopV2AccountAlias: {
      phoneNumber?: components["schemas"]["GoogleStandardpaymentsTypesV2PhoneNumber"];
      /** @description The email address the user has on file with the integrator. */
      emailAddress?: string;
    };
    /** @description An E.164 formatted phone number. Examples include +14035551111 and +918067218000. This will always lead with a + and include only numbers afterwards (no dashes). */
    GoogleStandardpaymentsTypesV2PhoneNumber: {
      /** @description **REQUIRED**: This is a E.164 formatted phone number. Examples include +14035551111 and +918067218000. This will always lead with a + and include only numbers afterwards (no dashes). */
      value?: string;
    };
    AccountType: {
      wirelessCarrierAccountType?: components["schemas"]["WirelessCarrierAccountType"];
    };
    /** @description The account type the user has with a wireless carrier. This is used to tailor display messages to the users. For example, the payment dialog for a user with a prepaid plan may say "deduct from your carrier balance", rather than "bill to your carrier account." */
    WirelessCarrierAccountType: {
      prepaid?: components["schemas"]["GoogleStandardpaymentsTypesV2Empty"];
      postpaid?: components["schemas"]["GoogleStandardpaymentsTypesV2Empty"];
      enterprise?: components["schemas"]["GoogleStandardpaymentsTypesV2Empty"];
      willNotProvidePii?: components["schemas"]["GoogleStandardpaymentsTypesV2Empty"];
      controlPlan?: components["schemas"]["GoogleStandardpaymentsTypesV2Empty"];
    };
    /** @description  This object is used for extensibility because booleans and enumerations often need to be extended with extra data. The implementer uses it to determine presence. The enumeration this represents may be extended to contain data in future versions. The JSON representation for `Empty` is empty JSON object `{}`. */
    GoogleStandardpaymentsTypesV2Empty: { [key: string]: unknown };
    /** @description Masked account details of a bank account. */
    MaskedBankAccountDetails: {
      /** @description Suffix of the account number. */
      accountNumberSuffix?: string;
      bankAccountType?: components["schemas"]["GoogleStandardpaymentsTypesV2BankAccountType"];
      bankAccountMetadata?: components["schemas"]["BankAccountMetadata"];
    };
    /** @description Account type of a bank account. */
    GoogleStandardpaymentsTypesV2BankAccountType: {
      /** @enum {string} */
      type?: "TYPE_UNSPECIFIED" | "SAVINGS" | "CHECKING" | "CURRENT";
    };
    /** @description Metadata about the bank account. */
    BankAccountMetadata: {
      /** @description The banking product name of this account. */
      bankingProductName?: string;
    };
    TransactionLimits: {
      transactionMaxLimit?: components["schemas"]["GoogleStandardpaymentsTypesV2TransactionLimit"];
    };
    /** @description Defines a transaction limit amount or the absence of a limit. */
    GoogleStandardpaymentsTypesV2TransactionLimit: {
      limitAmount?: components["schemas"]["GoogleStandardpaymentsTypesV2Amount"];
      noLimit?: components["schemas"]["GoogleStandardpaymentsTypesV2Empty"];
    };
    /** @description Associates an amount in micros with a currency code. */
    GoogleStandardpaymentsTypesV2Amount: {
      /** @description **REQUIRED**: An amount in [micros] (https://developers.google.com/standard-payments/reference/glossary#micros "What are micros?"). */
      amountMicros?: string;
      /** @description **REQUIRED**: ISO 4217 3-letter currency code */
      currencyCode?: string;
    };
    /** @description Structure holding information about a user. */
    GoogleStandardpaymentsTypesV2UserInformation: {
      /** @description **OPTIONAL**: Customer's full name. */
      name?: string;
      /** @description **OPTIONAL**: This holds unstructured Address text. */
      addressLine?: string[];
      /** @description **OPTIONAL**: This is something of a fuzzy term, but it generally refers to the city/town portion of an address. In regions of the world where localities are not well defined or do not fit into this structure well (for example, Japan and China), leave locality_name empty and use address_line. Examples: US city, IT comune, UK post town. */
      localityName?: string;
      /** @description **OPTIONAL**: Top-level administrative subdivision of this country" Examples: US state, IT region, CN province, JP prefecture." */
      administrativeAreaName?: string;
      /** @description **OPTIONAL**: Despite the name, postal_code_number values are frequently alphanumeric. Examples: "94043", "SW1W", "SW1W 9TQ". */
      postalCodeNumber?: string;
      /** @description **OPTIONAL**: Customer address country code, expected to be ISO-3166-1 Alpha-2. */
      countryCode?: string;
      /** @description **OPTIONAL**: Customer's phone number. */
      phone?: string;
      /** @description **OPTIONAL**: Customer's email address. */
      emailAddress?: string;
    };
    /** @description Request object for the AssociateAccountWithVendorGeneratedToken method. */
    AssociateAccountWithVendorGeneratedTokenRequest: {
      requestHeader?: components["schemas"]["GoogleStandardpaymentsTypesV2RequestHeader"];
      /** @description **OPTIONAL**: `requestId` of the authentication request that preceded this call. This identifier was generated by Google during the authentication flow. This is only present if the user went through the Android app authentication, web authentication, or an asynchronous authentication method that uses `authenticationResultNotification`. */
      authenticationRequestId?: string;
      otpVerification?: components["schemas"]["GoogleStandardpaymentsTypesV1OtpVerification"];
      /** @description **REQUIRED**: True if we desire the Integrator to provide the address associated with this account. */
      provideUserInformation?: boolean;
      /** @description **REQUIRED**: The identifier of this association. This identifier is created by Google and is sent during re-authentication flows to identify which account should be authenticated. This is a string that has a maximum length of 100 characters. */
      associationId?: string;
    };
    /** @description Object that encapsulates the OTP verification response. */
    GoogleStandardpaymentsTypesV1OtpVerification: {
      /** @description **REQUIRED**: This is the `requestId` generated by Google during the `sendOtp` call which this request is associated with. */
      sendOtpRequestId?: string;
      /** @description **REQUIRED**: This is the OTP the user provided if this call was preceded by a `sendOtp` call */
      otp?: string;
    };
    /** @description Response object for the AssociateAccountWithVendorGeneratedToken method. */
    AssociateAccountWithVendorGeneratedTokenResponse: {
      responseHeader?: components["schemas"]["GoogleStandardpaymentsTypesV2ResponseHeader"];
      /** @description **DEPRECATED**: This identifier is specific to the integrator and is generated by the integrator. It is used for debugging purposes only in order to identify this call. This is the identifier that the integrator knows this call by. */
      paymentIntegratorAssociateAccountId?: string;
      result?: components["schemas"]["AssociateAccountWithVendorGeneratedTokenResponseAssociateAccountResult"];
    };
    AssociateAccountWithVendorGeneratedTokenResponseAssociateAccountResult: {
      success?: components["schemas"]["AssociateAccountWithVendorGeneratedTokenResponseAssociateAccountResultSuccessDetails"];
      userAuthenticationFailed?: components["schemas"]["GoogleStandardpaymentsTypesV2UserAuthenticationFailed"];
      notEligible?: components["schemas"]["GoogleStandardpaymentsTypesV2AccountNotEligible"];
      otpNotMatched?: components["schemas"]["GoogleStandardpaymentsTypesV2OtpNotMatched"];
      otpAlreadyUsed?: components["schemas"]["GoogleStandardpaymentsTypesV2OtpAlreadyUsed"];
      otpLimitReached?: components["schemas"]["GoogleStandardpaymentsTypesV2OtpLimitReached"];
    };
    AssociateAccountWithVendorGeneratedTokenResponseAssociateAccountResultSuccessDetails: {
      /** @description **REQUIRED**: This is the token that both companies will use to identify the bank account that is associated during this method. This identifies the payer bank account in `transferFunds` calls. This is a string that has a maximum length of 100 characters. */
      vendorPaymentToken?: string;
      tokenExpirationTime?: components["schemas"]["GoogleStandardpaymentsTypesV1Timestamp"];
      accountDetails?: components["schemas"]["AssociatedAccountDetails"];
      accountId?: components["schemas"]["AssociatedAccountIdentifier"];
      associatedAccountIdentifier?: components["schemas"]["AssociatedAccountIdentifier"];
      bankAccountIdentifier?: components["schemas"]["GoogleStandardpaymentsTypesV2BankAccountIdentifier"];
      associatedAccountDetails?: components["schemas"]["AssociatedAccountDetails"];
      bankAccountDetails?: components["schemas"]["MaskedBankAccountDetails"];
      transactionLimits?: components["schemas"]["TransactionLimits"];
      userInformation?: components["schemas"]["GoogleStandardpaymentsTypesV1UserInformation"];
    };
    /** @description A timestamp object representing a point on the ISO timeline in milliseconds since the Unix epoch. */
    GoogleStandardpaymentsTypesV1Timestamp: {
      /** @description Milliseconds since the Unix epoch */
      epochMillis?: string;
    };
    /** @description Structure holding information about a user. */
    GoogleStandardpaymentsTypesV1UserInformation: {
      /** @description **OPTIONAL**: Customer's full name. */
      name?: string;
      /** @description **OPTIONAL**: This holds unstructured Address text. */
      addressLine?: string[];
      /** @description **OPTIONAL**: This is something of a fuzzy term, but it generally refers to the city/town portion of an address. In regions of the world where localities are not well defined or do not fit into this structure well (for example, Japan and China), leave locality_name empty and use address_line. Examples: US city, IT comune, UK post town. */
      localityName?: string;
      /** @description **OPTIONAL**: Top-level administrative subdivision of this country" Examples: US state, IT region, CN province, JP prefecture." */
      administrativeAreaName?: string;
      /** @description **OPTIONAL**: Despite the name, postal_code_number values are frequently alphanumeric. Examples: "94043", "SW1W", "SW1W 9TQ". */
      postalCodeNumber?: string;
      /** @description **OPTIONAL**: Customer address country code, expected to be ISO-3166-1 Alpha-2. */
      countryCode?: string;
      /** @description **OPTIONAL**: Customer's phone number. */
      phone?: string;
      /** @description **OPTIONAL**: Customer's email address. */
      emailAddress?: string;
    };
    /** @description The user failed to authenticate with the integrator. */
    GoogleStandardpaymentsTypesV2UserAuthenticationFailed: {
      rawResult?: components["schemas"]["GoogleStandardpaymentsTypesV2RawResult"];
    };
    /** @description Raw result object. */
    GoogleStandardpaymentsTypesV2RawResult: {
      /** @description **OPTIONAL**: Scope of the raw_code, can be empty. */
      scope?: string;
      /** @description **REQUIRED**: Raw code from the integrator or subsystems within it. */
      rawCode?: string;
    };
    /** @description User's account is not eligible for this service. */
    GoogleStandardpaymentsTypesV2AccountNotEligible: {
      rawResult?: components["schemas"]["GoogleStandardpaymentsTypesV2RawResult"];
    };
    /** @description OTP did not match what the integrator sent. */
    GoogleStandardpaymentsTypesV2OtpNotMatched: {
      rawResult?: components["schemas"]["GoogleStandardpaymentsTypesV2RawResult"];
    };
    /** @description OTP was already used. */
    GoogleStandardpaymentsTypesV2OtpAlreadyUsed: {
      rawResult?: components["schemas"]["GoogleStandardpaymentsTypesV2RawResult"];
    };
    /** @description User has requested or tried to verify too many OTPs. */
    GoogleStandardpaymentsTypesV2OtpLimitReached: {
      rawResult?: components["schemas"]["GoogleStandardpaymentsTypesV2RawResult"];
    };
    /** @description Request object for the disassociate account method. */
    DisassociateAccountRequest: {
      requestHeader?: components["schemas"]["GoogleStandardpaymentsTypesV2RequestHeader"];
      googlePaymentToken?: components["schemas"]["GoogleStandardpaymentsTypesV1GooglePaymentToken"];
      vendorPaymentToken?: components["schemas"]["GoogleStandardpaymentsTypesV1VendorPaymentToken"];
    };
    /** @description Describes a GooglePaymentToken (GPT), including the token and the issuer of the backing user account. */
    GoogleStandardpaymentsTypesV1GooglePaymentToken: {
      issuerId?: components["schemas"]["GoogleStandardpaymentsTypesV1IssuerId"];
      /** @description **REQUIRED**: This is the token that both companies will use to identify the account for purchases between each other. */
      token?: string;
    };
    /** @description Contains a list of responses to challenges that have been requested in the preceding quotation response. This could be an OTP token, FIDO2 assertion, and so on. */
    GoogleStandardpaymentsTypesV3ChallengeResults: {
      challengeOptionId?: string;
      fidoAssertion?: components["schemas"]["GoogleStandardpaymentsTypesV3FidoAssertion"];
    };
    /** @description Fido Assertion */
    GoogleStandardpaymentsTypesV3FidoAssertion: {
      rawId?: string;
      id?: string;
      response?: components["schemas"]["GoogleStandardpaymentsTypesV3FidoAssertionResponse"];
      type?: string;
    };
    /** @description Reponse in Fido Assertion */
    GoogleStandardpaymentsTypesV3FidoAssertionResponse: {
      authenticatorData?: string;
      signature?: string;
      userHandle?: string;
      clientDataJSON?: string;
    };
    /** @description A unique identifier for an issuer of user accounts. */
    GoogleStandardpaymentsTypesV1IssuerId: {
      /** @description **REQUIRED**: The string value of the identifier. This unique identifier is defined by Google. Google will share a list with the identifiers for all external issuers available via the payment integrator. */
      value?: string;
    };
    /** @description Describes a VendorPaymentToken (VPT), including the token and the issuer of the backing user account. */
    GoogleStandardpaymentsTypesV1VendorPaymentToken: {
      issuerId?: components["schemas"]["GoogleStandardpaymentsTypesV1IssuerId"];
      /** @description **REQUIRED**: This is the token that both companies will use to identify the account for purchases between each other. */
      token?: string;
    };
    /** @description Response object for the disassociate account method. */
    DisassociateAccountResponse: {
      responseHeader?: components["schemas"]["GoogleStandardpaymentsTypesV2ResponseHeader"];
      result?: components["schemas"]["DisassociateAccountResponseDisassociateAccountResult"];
    };
    /** @description Result for disassociate account. */
    DisassociateAccountResponseDisassociateAccountResult: {
      success?: components["schemas"]["GoogleStandardpaymentsTypesV2Empty"];
    };
    /** @description Request object for the TransferFunds method. */
    TransferFundsRequest: {
      requestHeader?: components["schemas"]["GoogleStandardpaymentsTypesV2RequestHeader"];
      googlePaymentToken?: components["schemas"]["GoogleStandardpaymentsTypesV1GooglePaymentToken"];
      vendorPaymentToken?: components["schemas"]["GoogleStandardpaymentsTypesV1VendorPaymentToken"];
      /** @description **REQUIRED**: This is the description of the transaction that can be put on the customer's statement. Localized to the userLocale found in the `request_header`. This format can be changed without notice and must never be parsed. */
      transactionDescription?: string;
      amount?: components["schemas"]["GoogleStandardpaymentsTypesV1Amount"];
      payeeProxy?: components["schemas"]["PayeeProxyDestination"];
      /** @description This ID links the TransferFunds call to the preceding quotation */
      getTransferFundsQuotationRequestId?: string;
      challengeResults?: components["schemas"]["GoogleStandardpaymentsTypesV3ChallengeResults"];
    };
    /** @description Request object for the GetTransferFundsQuotation method. */
    GetTransferFundsQuotationRequest: {
      requestHeader?: components["schemas"]["GoogleStandardpaymentsTypesV2RequestHeader"];
      /** @description **REQUIRED**: The identifier of this association. This identifier is created by Google and is sent during re-authentication flows to identify which account should be authenticated. This is a string that has a maximum length of 100 characters. */
      associationId?: string;
      /** @description **REQUIRED**: This is the description of the transaction that can be put on the customer's statement. Localized to the userLocale found in the `request_header`. This format can be changed without notice and must never be parsed. */
      transactionDescription?: string;
      amount?: components["schemas"]["GoogleStandardpaymentsTypesV1Amount"];
      payeeProxy?: components["schemas"]["PayeeProxyDestination"];
      googlePaymentToken?: components["schemas"]["GoogleStandardpaymentsTypesV2GooglePaymentToken"];
    };
    /** @description Response object for the GetTransferFundsQuotation method. */
    GetTransferFundsQuotationResponse: {
      responseHeader?: components["schemas"]["GoogleStandardpaymentsTypesV2ResponseHeader"];
      result?: components["schemas"]["GoogleStandardpaymentsTypesV3Result"];
    };
    /** @description Results object of the GetTransferFundsQuotationResponse */
    GoogleStandardpaymentsTypesV3Result: {
      success?: components["schemas"]["GoogleStandardpaymentsTypesV3Success"];
    };
    /** @description Success object of the GetTransferFundsQuotationResponse Result */
    GoogleStandardpaymentsTypesV3Success: {
      payeeProxyLookup?: components["schemas"]["GoogleStandardpaymentsTypesV3PayeeProxyLookup"];
      feeAmount?: components["schemas"]["GoogleStandardpaymentsTypesV2Amount"];
      challengeOptions?: components["schemas"]["GoogleStandardpaymentsTypesV3ChallengeOptions"];
    };
    /** @description PayeeProxyLookup object of the GetTransferFundsQuotationResponse Result Success */
    GoogleStandardpaymentsTypesV3PayeeProxyLookup: {
      displayInfo?: components["schemas"]["PayeeProxyDisplayInfo"];
    };
    /** @description ChallengeOptions object of the GetTransferFundsQuotationResponse Result Success */
    GoogleStandardpaymentsTypesV3ChallengeOptions: {
      challengeOptionId?: string;
      fido?: components["schemas"]["GoogleStandardpaymentsTypesV3Fido"];
    };
    /** @description Fido object of the GetTransferFundsQuotationResponse Result Success ChallengeOptions */
    GoogleStandardpaymentsTypesV3Fido: {
      challenge?: string;
      allowCredentials?: components["schemas"]["GoogleStandardpaymentsTypesV3AllowCredentials"];
    };
    /** @description AllowCredentials object of the GetTransferFundsQuotationResponse Result Success ChallengeOptions Fido */
    GoogleStandardpaymentsTypesV3AllowCredentials: {
      type?: string;
      id?: string;
    };
    /** @description Associates an amount in micros with a currency code. */
    GoogleStandardpaymentsTypesV1Amount: {
      /** @description **REQUIRED**: An amount in [micros] (https://developers.google.com/standard-payments/reference/glossary#micros "What are micros?"). */
      amountMicros?: string;
      /** @description **REQUIRED**: ISO 4217 3-letter currency code */
      currencyCode?: string;
    };
    /** @description This object represents a bank account that is owned by Google and may receive funds as part of a transfer. */
    GoogleBankAccount: {
      bankAccountId?: components["schemas"]["GoogleStandardpaymentsTypesV2BankAccountIdentifier"];
    };
    /** @description This object represents a bank account that is not owned by Google. */
    DestinationBankAccount: {
      bankAccountId?: components["schemas"]["GoogleStandardpaymentsTypesV2BankAccountIdentifier"];
      bankAccountOwner?: components["schemas"]["BankAccountOwner"];
    };
    /** @description This object holds information about the owner of the account that is the destination of a funds transfer. */
    BankAccountOwner: {
      /** @description Name of the account holder (if present). */
      name?: string;
    };
    /** @description Destination for Payee that uses a PayeeProxy key to reference a payee. */
    PayeeProxyDestination: {
      payeeProxyKey?: components["schemas"]["PayeeProxyKey"];
      /** @description **OPTIONAL**: `requestId` from a lookup for this PayeeProxyKey (if applicable). This value will be set when there was a DisplayInfo lookup done for this PayeeProxyKey in the context of this transfer. */
      payeeProxyLookupRequestId?: string;
    };
    /** @description ProxyKey that may be used as a Payee if the proxy key is registered with a PayeeProxy directory and may be used to query the registration status or to retrieve display information from the directory. */
    PayeeProxyKey: {
      /** @description A proxy key that is a phone number. */
      phoneNumber?: string;
      nationalId?: components["schemas"]["ProxyKeyNationalId"];
      /** @description A proxy key that is a business ID number. */
      businessId?: string;
      /** @description A proxy key that is a virtual payment address. */
      virtualPaymentAddress?: string;
      /** @description **REQUIRED**: Network Id for the payee proxy. For example, ‘PaymentNetwork1', 'PaymentNetwork2', etc. */
      networkId?: string;
    };
    /** @description A proxy key that is a national ID number. */
    ProxyKeyNationalId: {
      /** @description **REQUIRED**: The value of the national ID number. */
      nationalId?: string;
      /** @description **REQUIRED**: ID issuing country's country code, expected to be ISO-3166-1 Alpha-2. */
      issuingCountryCode?: string;
    };
    /** @description Response object for the funds transfer method. */
    TransferFundsResponse: {
      responseHeader?: components["schemas"]["GoogleStandardpaymentsTypesV2ResponseHeader"];
      /** @description **OPTIONAL**: This identifier is specific to the integrator and is generated by the integrator. This is the identifier that the integrator knows this transaction by. For convenience, this identifier is included with in the remittance details */
      paymentIntegratorTransactionId?: string;
      result?: components["schemas"]["TransferFundsResponseTransferFundsResult"];
      resultNotKnownYet?: components["schemas"]["TransactionResultNotKnownYet"];
    };
    /** @description Results for transfer */
    TransferFundsResponseTransferFundsResult: {
      success?: components["schemas"]["GoogleStandardpaymentsTypesV2Empty"];
      chargeExceedsTransactionLimit?: components["schemas"]["GoogleStandardpaymentsTypesV2ChargeExceedsTransactionLimit"];
      chargeExceedsDailyLimit?: components["schemas"]["GoogleStandardpaymentsTypesV2ChargeExceedsDailyLimit"];
      chargeExceedsMonthlyLimit?: components["schemas"]["GoogleStandardpaymentsTypesV2ChargeExceedsMonthlyLimit"];
      chargeUnderLimit?: components["schemas"]["GoogleStandardpaymentsTypesV2ChargeUnderLimit"];
      insufficientFunds?: components["schemas"]["GoogleStandardpaymentsTypesV2InsufficientFunds"];
      accountDoesNotSupportCurrency?: components["schemas"]["GoogleStandardpaymentsTypesV2AccountDoesNotSupportCurrency"];
      accountClosed?: components["schemas"]["GoogleStandardpaymentsTypesV2AccountClosed"];
      accountClosedAccountTakenOver?: components["schemas"]["GoogleStandardpaymentsTypesV2AccountClosedAccountTakenOver"];
      accountOnHold?: components["schemas"]["GoogleStandardpaymentsTypesV2AccountOnHold"];
      accountClosedFraud?: components["schemas"]["GoogleStandardpaymentsTypesV2AccountClosedFraud"];
      googlePaymentTokenInvalidatedByUser?: components["schemas"]["GoogleStandardpaymentsTypesV2GooglePaymentTokenInvalidatedByUser"];
      tokenRefreshRequired?: components["schemas"]["GoogleStandardpaymentsTypesV2TokenRefreshRequired"];
      payeeProxyNotRegistered?: components["schemas"]["GoogleStandardpaymentsTypesV2PayeeProxyNotRegistered"];
    };
    /** @description This payment request's `amount` exceeds per-transaction limit. If this code is used populate the transaction_limit field for user messaging purposes. */
    GoogleStandardpaymentsTypesV2ChargeExceedsTransactionLimit: {
      rawResult?: components["schemas"]["GoogleStandardpaymentsTypesV2RawResult"];
      transactionLimit?: components["schemas"]["GoogleStandardpaymentsTypesV2Amount"];
    };
    /** @description This account cannot be used for purchases right now as it has exceeded its daily `amount` limits. */
    GoogleStandardpaymentsTypesV2ChargeExceedsDailyLimit: {
      rawResult?: components["schemas"]["GoogleStandardpaymentsTypesV2RawResult"];
    };
    /** @description This account cannot be used for purchases right now as it has exceeded its monthly `amount` limits. */
    GoogleStandardpaymentsTypesV2ChargeExceedsMonthlyLimit: {
      rawResult?: components["schemas"]["GoogleStandardpaymentsTypesV2RawResult"];
    };
    /** @description This request's `amount` does not meet the minimum transaction amount. */
    GoogleStandardpaymentsTypesV2ChargeUnderLimit: {
      rawResult?: components["schemas"]["GoogleStandardpaymentsTypesV2RawResult"];
      minimumTransactionLimit?: components["schemas"]["GoogleStandardpaymentsTypesV2Amount"];
    };
    /** @description This account does not have sufficient funds to guarantee this capture. */
    GoogleStandardpaymentsTypesV2InsufficientFunds: {
      rawResult?: components["schemas"]["GoogleStandardpaymentsTypesV2RawResult"];
      currentBalance?: components["schemas"]["GoogleStandardpaymentsTypesV2Amount"];
    };
    /** @description This account does not support the requested currency. */
    GoogleStandardpaymentsTypesV2AccountDoesNotSupportCurrency: {
      rawResult?: components["schemas"]["GoogleStandardpaymentsTypesV2RawResult"];
    };
    /** @description The user's account held with the integrator has been closed. */
    GoogleStandardpaymentsTypesV2AccountClosed: {
      rawResult?: components["schemas"]["GoogleStandardpaymentsTypesV2RawResult"];
    };
    /** @description The user's account with the integrator has been closed, suspected account take over. */
    GoogleStandardpaymentsTypesV2AccountClosedAccountTakenOver: {
      rawResult?: components["schemas"]["GoogleStandardpaymentsTypesV2RawResult"];
    };
    /** @description The account is on hold. */
    GoogleStandardpaymentsTypesV2AccountOnHold: {
      rawResult?: components["schemas"]["GoogleStandardpaymentsTypesV2RawResult"];
    };
    /** @description The user's account held with the integrator has been closed because of fraud. */
    GoogleStandardpaymentsTypesV2AccountClosedFraud: {
      rawResult?: components["schemas"]["GoogleStandardpaymentsTypesV2RawResult"];
    };
    /** @description The account is active, but the GPT has been invalidated by the user on the integrator's side. */
    GoogleStandardpaymentsTypesV2GooglePaymentTokenInvalidatedByUser: {
      rawResult?: components["schemas"]["GoogleStandardpaymentsTypesV2RawResult"];
    };
    /** @description Returning this requires the user to go through a refresh flow. */
    GoogleStandardpaymentsTypesV2TokenRefreshRequired: {
      rawResult?: components["schemas"]["GoogleStandardpaymentsTypesV2RawResult"];
    };
    /** @description The payee proxy is not registered. */
    GoogleStandardpaymentsTypesV2PayeeProxyNotRegistered: {
      rawResult?: components["schemas"]["GoogleStandardpaymentsTypesV2RawResult"];
    };
    TransactionResultNotKnownYet: {
      creditStatusUnknown?: components["schemas"]["GoogleStandardpaymentsTypesV2Empty"];
    };
    /** @description Request object for the Disburse method. */
    DisburseRequest: {
      requestHeader?: components["schemas"]["GoogleStandardpaymentsTypesV2RequestHeader"];
      sourceGoogleBankAccount?: components["schemas"]["GoogleBankAccount"];
      destinationBankAccount?: components["schemas"]["DestinationBankAccount"];
      payeeProxyKey?: components["schemas"]["PayeeProxyKey"];
      amount?: components["schemas"]["GoogleStandardpaymentsTypesV1Amount"];
      /** @description **REQUIRED**: This is the description of the transaction that can be put on the customer's statement. Localized to the userLocale found in the `request_header`. This format can be changed without notice and must never be parsed. */
      transactionDescription?: string;
    };
    /** @description Response object for the disburse method. */
    DisburseResponse: {
      responseHeader?: components["schemas"]["GoogleStandardpaymentsTypesV2ResponseHeader"];
      /** @description **OPTIONAL**: This identifier is specific to the integrator and is generated by the integrator. This is the identifier that the integrator knows this transaction by. For convenience, this identifier is included with in the remittance details */
      paymentIntegratorTransactionId?: string;
      result?: components["schemas"]["GoogleStandardpaymentsTypesBankingFopV2DisburseResult"];
      resultNotKnownYet?: components["schemas"]["TransactionResultNotKnownYet"];
    };
    /** @description Result for disburse. */
    GoogleStandardpaymentsTypesBankingFopV2DisburseResult: {
      success?: components["schemas"]["GoogleStandardpaymentsTypesV2Empty"];
      accountDoesNotSupportCurrency?: components["schemas"]["GoogleStandardpaymentsTypesV2AccountDoesNotSupportCurrency"];
      accountClosed?: components["schemas"]["GoogleStandardpaymentsTypesV2AccountClosed"];
      payeeProxyNotRegistered?: components["schemas"]["GoogleStandardpaymentsTypesV2PayeeProxyNotRegistered"];
    };
    /** @description Request object for GetTransferFundsTransactionStatus. */
    GetTransferFundsTransactionStatusRequest: {
      requestHeader?: components["schemas"]["GoogleStandardpaymentsTypesV2RequestHeader"];
      /** @description **REQUIRED**: The request_id of the original TransferFunds transaction. */
      transferFundsRequestId?: string;
    };
    /** @description Response object for GetTransferFundsTransactionStatus. */
    GetTransferFundsTransactionStatusResponse: {
      responseHeader?: components["schemas"]["GoogleStandardpaymentsTypesV2ResponseHeader"];
      result?: components["schemas"]["GetTransactionStatusResult"];
      transferFundsResult?: components["schemas"]["TransferFundsResponseTransferFundsResult"];
      transactionDoesNotExist?: components["schemas"]["GoogleStandardpaymentsTypesV2Empty"];
      resultNotKnownYet?: components["schemas"]["TransactionResultNotKnownYet"];
    };
    /** @description Result codes for GetTransactionStatus. This indicates the status of the lookup operation and not the actual transaction. If the transaction look up failed due to some internal error, the partner should return a non 200 Http error code. */
    GetTransactionStatusResult: {
      success?: components["schemas"]["GoogleStandardpaymentsTypesV2Empty"];
    };
    /** @description Request object for GetDisburseTransactionStatus. */
    GetDisburseTransactionStatusRequest: {
      requestHeader?: components["schemas"]["GoogleStandardpaymentsTypesV2RequestHeader"];
      /** @description **REQUIRED**: The request_id of the original disburse transaction. */
      disburseRequestId?: string;
      /** @description **REQUIRED**: The payment integrator account identifier that identifies the caller and associated contractual constraints for this interaction. */
      paymentIntegratorAccountId?: string;
    };
    /** @description Response object for GetDisburseTransactionStatus. */
    GetDisburseTransactionStatusResponse: {
      responseHeader?: components["schemas"]["GoogleStandardpaymentsTypesV2ResponseHeader"];
      result?: components["schemas"]["GetTransactionStatusResult"];
      disburseResult?: components["schemas"]["GoogleStandardpaymentsTypesBankingFopV2DisburseResult"];
      transactionDoesNotExist?: components["schemas"]["GoogleStandardpaymentsTypesV2Empty"];
      resultNotKnownYet?: components["schemas"]["TransactionResultNotKnownYet"];
    };
    /** @description Request object for the GetPayeeProxyRegistrationStatus method. */
    GetPayeeProxyRegistrationStatusRequest: {
      requestHeader?: components["schemas"]["GoogleStandardpaymentsTypesV2RequestHeader"];
      proxyKey?: components["schemas"]["PayeeProxyKey"];
    };
    /** @description Response object for the GetPayeeProxyRegistrationStatus method */
    GetPayeeProxyRegistrationStatusResponse: {
      responseHeader?: components["schemas"]["GoogleStandardpaymentsTypesV2ResponseHeader"];
      /**
       * @description **REQUIRED**: Registration status of the Proxy Key.
       * @enum {string}
       */
      registrationStatus?:
        | "PAYEE_PROXY_REGISTRATION_STATUS_UNSPECIFIED"
        | "REGISTERED"
        | "NOT_REGISTERED";
    };
    /** @description Request object for the GetPayeeProxyDisplayInfo method. */
    GetPayeeProxyDisplayInfoRequest: {
      requestHeader?: components["schemas"]["GoogleStandardpaymentsTypesV2RequestHeader"];
      proxyKey?: components["schemas"]["PayeeProxyKey"];
      /** @description **OPTIONAL**: The id that represents the association between a customer's Google account and a customer's account with the vendor. Only present if the request is initiated by a user in-session. */
      associationId?: string;
    };
    /** @description Response object for the GetPayeeProxyDisplayInfo method */
    GetPayeeProxyDisplayInfoResponse: {
      responseHeader?: components["schemas"]["GoogleStandardpaymentsTypesV2ResponseHeader"];
      displayInfoResult?: components["schemas"]["GetPayeeProxyDisplayInfoResponseGetPayeeProxyDisplayInfoResult"];
    };
    GetPayeeProxyDisplayInfoResponseGetPayeeProxyDisplayInfoResult: {
      success?: components["schemas"]["PayeeProxyDisplayInfoSuccess"];
      failure?: components["schemas"]["PayeeProxyDisplayInfoFailure"];
    };
    /** @description Message that contains the details of a successful display information query. */
    PayeeProxyDisplayInfoSuccess: {
      displayInfo?: components["schemas"]["PayeeProxyDisplayInfo"];
    };
    /** @description Data that is meant for display and has been registered for a given PayeeProxyKey. */
    PayeeProxyDisplayInfo: {
      /** @description Name that has been registered for display with the PayeeProxy. */
      displayName?: string;
    };
    /** @description Message that contains the details of a failed display information query. */
    PayeeProxyDisplayInfoFailure: {
      /** @enum {string} */
      failureReason?:
        | "PAYEE_PROXY_DISPLAY_INFO_FAILURE_REASON_UNSPECIFIED"
        | "PROXY_KEY_NOT_REGISTERED";
    };
  };
}

export interface operations {
  /** Associates the customer's account with the payment processor to the Google instrument being added. Account association happens after the integrator has authenticated the user. Association occurs via a server-to-server call that contains the `requestId` for the associated authentication flow (`authenticationRequestId`), an `associationId` and a `googlePaymentToken` (GPT). The payment processor should associate the `associationId` and the `googlePaymentToken` to the customer's account for authentication. The GPT is used to initiate payments. The `associationId` is used during re-authentication calls to identify the account for authentication. If Google sends an `associationId` or a `googlePaymentToken` that the integrator has already seen during a different association, then it throws an error. An example request looks like: { "requestHeader": { "protocolVersion": { "major": 2 }, "requestId": "bWVyY2hhbnQgdHJhbnNhY3Rpb24gaWQ", "requestTimestamp": { "epochMillis": "1502220196077" }, "paymentIntegratorAccountId": "InvisiCashUSD" }, "authenticationRequestId": "bnAxdWTydDX==", "googlePaymentToken": { "issuerId": { "value": "InvisiCashUSA" }, "token": "ZXhhbXBsZSB1bmlxdWUgcGF5bWVudCB0b2tlbiB2YWx1ZQ" }, "associationId": "LmddbXBsZSByZWZlcmVuY2UgdG9rZW4gdmFsdWU", "provideUserInformation": true } An example response looks like: { "responseHeader": { "responseTimestamp": { "epochMillis": "1481900013178" } }, "result": { "success": { "bankAccountIdentifier": { "singaporeBankAccount": { "sgFastBankAccount": { "localAccountNumber": "113A", "swiftBic": { "value": "COBADEFF478" } }, "localBankIdentifier":{ "localBankCode": "7171", "localBranchCode": "060" } } }, "bankAccountDetails" : { "accountNumberSuffix": "1234", "bankAccountType": { "type": "SAVINGS" }, "bankAccountMetadata": { } }, "transactionLimits": { "transactionMaxLimit": { "noLimit": {} } }, "userInformation": { "name": "Example Customer", "addressLine": ["70 Pasir Panjang Rd"], "localityName": "#03-71", "postalCodeNumber": "117371", "countryCode": "SG" } } } } */
  AssociateAccount: {
    responses: {
      /** Successful operation */
      default: {
        content: {
          "*/*": components["schemas"]["AssociateAccountResponse"];
        };
      };
    };
    /** The request body. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssociateAccountRequest"];
      };
    };
  };
  /** Associates the customer's account with the payment processor to the Google instrument being added. Account association happens after the integrator has authenticated the user. Association occurs via a server-to-server call that contains the `requestId` for the associated authentication flow (`authenticationRequestId`) and an `associationId`.The payment processor should associate the `associationId` to the customer's account. The `associationId` is used during re-authentication calls to identify the account for authentication. If Google sends an `associationId` that the integrator has already seen during a different association, then it throws an error. In the response, the payment processor generates a 'vendorPaymentToken' which is bound to the customer's account and is used for authorizing subsequent payments. An example request looks like: { "requestHeader": { "protocolVersion": { "major": 2 }, "requestId": "bWVyY2hhbnQgdHJhbnNhY3Rpb24gaWQ", "requestTimestamp": { "epochMillis": "1502220196077" }, "paymentIntegratorAccountId": "InvisiCashUSD" }, "authenticationRequestId": "bnAxdWTydDX==", "associationId": "LmddbXBsZSByZWZlcmVuY2UgdG9rZW4gdmFsdWU_", "provideUserInformation": true } An example response looks like: { "responseHeader": { "responseTimestamp": { "epochMillis": "1481900013178" } }, "result": { "success": { "vendorPaymentToken": "ZXhhbXBsZSB1bmlxdWUgcGF5bWVudCB0b2tlbiB2YWx1ZQ", "tokenExpirationTime": { "epochMillis": "1481919332394" }, "bankAccountIdentifier": { "singaporeBankAccount": { "sgFastBankAccount": { "localAccountNumber": "113A", "swiftBic": { "value": "COBADEFF478" } }, "localBankIdentifier":{ "localBankCode": "7171", "localBranchCode": "060" } } }, "bankAccountDetails" : { "accountNumberSuffix": "1234", "bankAccountType": { "type": "SAVINGS" }, "bankAccountMetadata": { } }, "transactionLimits": { "transactionMaxLimit": { "noLimit": {} } }, "userInformation": { "name": "Example Customer", "addressLine": ["70 Pasir Panjang Rd"], "localityName": "#03-71", "postalCodeNumber": "117371", "countryCode": "SG" } } } } */
  AssociateAccountWithVendorGeneratedToken: {
    responses: {
      /** Successful operation */
      default: {
        content: {
          "*/*": components["schemas"]["AssociateAccountWithVendorGeneratedTokenResponse"];
        };
      };
    };
    /** The request body. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssociateAccountWithVendorGeneratedTokenRequest"];
      };
    };
  };
  /** Deletes the association between the customer's account with the payment processor and the Google instrument. This disassociation should be processed idempotently, so if the same requestId is used as a previously processed request, the previous result should be idempotently returned. Otherwise if Google sends a `googlePaymentToken` that has already been disassociated, an error should be returned. An example request looks like: { "requestHeader": { "protocolVersion": { "major": 2 }, "requestId": "bWVyY2hhbnQgdHJhbnNhY3Rpb24gaWQ", "requestTimestamp": { "epochMillis": "0" }, "paymentIntegratorAccountId": "InvisiCashUSD" }, "googlePaymentToken": { "issuerId": { "value": "InvisiCashUSA" }, "token": "ZXhhbXBsZSB1bmlxdWUgcGF5bWVudCB0b2tlbiB2YWx1ZQ" } } An example response looks like: { "responseHeader": { "responseTimestamp": { "epochMillis": "1481900013178" } }, "result": {"success": {}} } */
  DisassociateAccount: {
    responses: {
      /** Successful operation */
      default: {
        content: {
          "*/*": components["schemas"]["DisassociateAccountResponse"];
        };
      };
    };
    /** The request body. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["DisassociateAccountRequest"];
      };
    };
  };
  /** Initiates money movement between a customer's account held with Google and the payment processor. The combination of `requestId` within the header and `paymentIntegratorAccountId` is the idempotency key and uniquely identifies this transaction. All mutations on this transaction (refunds) populate the `requestId` value in the `capture_request_id` field. An example request looks like: { "requestHeader": { "protocolVersion": { "major": 2 }, "requestId": "bWVyY2hhbnQgdHJhbnNhY3Rpb24gaWQ", "requestTimestamp": { "epochMillis": "1502220196077" }, "paymentIntegratorAccountId": "InvisiCashUSA_USD" }, "googlePaymentToken": { "issuerId": { "value": "Mojaloop" }, "token": "ZXhhbXBsZSB1bmlxdWUgcGF5bWVudCB0b2tlbiB2YWx1ZQ" }, "transactionDescription": "Google - Music", "amount": { "amountMicros": "728000000", "currencyCode": "INR" }, "destinationBankAccount": { "bankAccountId": { "accountNumber": { "localAccountNumber": "1234-5678-91" }, "swiftBic": "XXXXSGS0XXX" }, "bankAccountOwner": { "name": "Sam User" } }, "transferFundsContext": {} } An example response looks like: { "responseHeader": { "responseTimestamp": { "epochMillis": "1481900013178" } }, "result": {"success": {}}, "paymentIntegratorTransactionId": "aW50ZWdyYXRvciB0cmFuc2FjdGlvbiBpZA" } */
  TransferFunds: {
    responses: {
      /** Successful operation */
      default: {
        content: {
          "*/*": components["schemas"]["TransferFundsResponse"];
        };
      };
    };
    /** The request body. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferFundsRequest"];
      };
    };
  };
  /** getTransferFundsQuotation. The goal of this RPC is to obtain the relevant information about a transfer to present those details to the user for their evaluation. The evaluation criteria can be presented in the form of a set of challenges, such as: 1) Acknowledgement of the resolved identity of the payee proxy; Note: we will omit this for the first iteration; we assume that payee proxy lookup has already been performed in a previous GetPayeeProxyDisplayInfo call. 2) Agreement to quoted transfer parameters, including calculated transfer fees, 3) Re-authentication or 2FA, e.g. OTP. If the user approves of the terms of a transfer, a subsequent TransferFunds call is made. An example request looks like: { "requestHeader": { "protocolVersion": { "major": 2 }, "requestId": "bWVyY2hhbnQgdHJhbnN", "requestTimestamp": { "epochMillis": "1502220196077" }, "paymentIntegratorAccountId": "Mojaloop" }, "associationId": "ZXhhbXBsZSB1bmlxdWUgcGF5bWVudC", "transactionDescription": "Payment", "amount": { "amountMicros": "5000000", "currencyCode": "SGD" }, "payeeProxy": { "payeeProxyKey": { "networkId": "paynow", "phoneNumber": "+6577778888" }, "payeeProxyLookupRequestId": "bWVyY2hhbnQgdHJhbnN" } } */
  GetQuotation: {
    responses: {
      /** Successful operation */
      default: {
        content: {
          "*/*": components["schemas"]["GetTransferFundsQuotationResponse"];
        };
      };
    };
    /** The request body. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["GetTransferFundsQuotationRequest"];
      };
    };
  };
  /** This method performs a disburse from a Google-owned bank account to an account specified in the request. */
  Disburse: {
    responses: {
      /** Successful operation */
      default: {
        content: {
          "*/*": components["schemas"]["DisburseResponse"];
        };
      };
    };
    /** The request body. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["DisburseRequest"];
      };
    };
  };
  /** This method fetches the status of a TransferFunds transaction. */
  GetTransferFundsTransactionStatus: {
    responses: {
      /** Successful operation */
      default: {
        content: {
          "*/*": components["schemas"]["GetTransferFundsTransactionStatusResponse"];
        };
      };
    };
    /** The request body. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["GetTransferFundsTransactionStatusRequest"];
      };
    };
  };
  /** This method fetches the status of a disburse transaction. */
  GetDisburseTransactionStatus: {
    responses: {
      /** Successful operation */
      default: {
        content: {
          "*/*": components["schemas"]["GetDisburseTransactionStatusResponse"];
        };
      };
    };
    /** The request body. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["GetDisburseTransactionStatusRequest"];
      };
    };
  };
  /** Checks whether or not a mapping to a Payee has been registered for the specified proxy key. An example request looks like: { "requestHeader": { "protocolVersion": { "major": 2 }, "requestId": "bWVyY2hhbnQgdHJhbnNhY3Rpb24gaWQ", "requestTimestamp": { "epochMillis": "1502220196077" }, "paymentIntegratorAccountId": "InvisiCashUSA_USD" }, "proxyKey": { "phoneNumber": "+001234567890" } } An example response looks like: { "responseHeader": { "responseTimestamp": { "epochMillis": "1481900013178" } }, "registrationStatus": "REGISTERED" } */
  GetPayeeProxyRegistrationStatus: {
    responses: {
      /** Successful operation */
      default: {
        content: {
          "*/*": components["schemas"]["GetPayeeProxyRegistrationStatusResponse"];
        };
      };
    };
    /** The request body. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["GetPayeeProxyRegistrationStatusRequest"];
      };
    };
  };
  /** Returns the display data that has been registered for the specified proxy key (e.g. display name to be shown before payment) An example request looks like: { "requestHeader": { "protocolVersion": { "major": 2 }, "requestId": "bWVyY2hhbnQgdHJhbnNhY3Rpb24gaWQ", "requestTimestamp": { "epochMillis": "1502220196077" }, "paymentIntegratorAccountId": "InvisiCashUSA_USD" }, "proxyKey": { "phoneNumber": "+001234567890" } } An example response looks like: { "responseHeader": { "responseTimestamp": { "epochMillis": "1481900013178" } }, "displayInfoResult": { "success": { "displayInfo": { "displayName": "Sam Payee" } } } } */
  GetPayeeProxyDisplayInfo: {
    responses: {
      /** Successful operation */
      default: {
        content: {
          "*/*": components["schemas"]["GetPayeeProxyDisplayInfoResponse"];
        };
      };
    };
    /** The request body. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["GetPayeeProxyDisplayInfoRequest"];
      };
    };
  };
}

export interface external {}
