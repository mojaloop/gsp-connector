/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/v2/associateAccount": {
    /** Associates the customer's account with the payment processor to the Google instrument being added. Account association happens after the integrator has authenticated the user. Association occurs via a server-to-server call that contains the `requestId` for the associated authentication flow (`authenticationRequestId`), an `associationId` and a `googlePaymentToken` (GPT). The payment processor should associate the `associationId` and the `googlePaymentToken` to the customer's account for authentication. The GPT is used to initiate payments. The `associationId` is used during re-authentication calls to identify the account for authentication. If Google sends an `associationId` or a `googlePaymentToken` that the integrator has already seen during a different association, then it throws an error. An example request looks like: { "requestHeader": { "protocolVersion": { "major": 2 }, "requestId": "bWVyY2hhbnQgdHJhbnNhY3Rpb24gaWQ", "requestTimestamp": { "epochMillis": "1502220196077" }, "paymentIntegratorAccountId": "InvisiCashUSD" }, "authenticationRequestId": "bnAxdWTydDX==", "googlePaymentToken": { "issuerId": { "value": "InvisiCashUSA" }, "token": "ZXhhbXBsZSB1bmlxdWUgcGF5bWVudCB0b2tlbiB2YWx1ZQ" }, "associationId": "LmddbXBsZSByZWZlcmVuY2UgdG9rZW4gdmFsdWU", "provideUserInformation": true } An example response looks like: { "responseHeader": { "responseTimestamp": { "epochMillis": "1481900013178" } }, "result": { "success": { "bankAccountIdentifier": { "singaporeBankAccount": { "sgFastBankAccount": { "localAccountNumber": "113A", "swiftBic": { "value": "COBADEFF478" } }, "localBankIdentifier":{ "localBankCode": "7171", "localBranchCode": "060" } } }, "bankAccountDetails" : { "accountNumberSuffix": "1234", "bankAccountType": { "type": "SAVINGS" }, "bankAccountMetadata": { } }, "transactionLimits": { "transactionMaxLimit": { "noLimit": {} } }, "userInformation": { "name": "Example Customer", "addressLine": ["70 Pasir Panjang Rd"], "localityName": "#03-71", "postalCodeNumber": "117371", "countryCode": "SG" } } } } */
    post: operations["AssociateAccount"];
  };
  "/v2/associateAccountWithVendorGeneratedToken": {
    /** Associates the customer's account with the payment processor to the Google instrument being added. Account association happens after the integrator has authenticated the user. Association occurs via a server-to-server call that contains the `requestId` for the associated authentication flow (`authenticationRequestId`) and an `associationId`.The payment processor should associate the `associationId` to the customer's account. The `associationId` is used during re-authentication calls to identify the account for authentication. If Google sends an `associationId` that the integrator has already seen during a different association, then it throws an error. In the response, the payment processor generates a 'vendorPaymentToken' which is bound to the customer's account and is used for authorizing subsequent payments. An example request looks like: { "requestHeader": { "protocolVersion": { "major": 2 }, "requestId": "bWVyY2hhbnQgdHJhbnNhY3Rpb24gaWQ", "requestTimestamp": { "epochMillis": "1502220196077" }, "paymentIntegratorAccountId": "InvisiCashUSD" }, "authenticationRequestId": "bnAxdWTydDX==", "associationId": "LmddbXBsZSByZWZlcmVuY2UgdG9rZW4gdmFsdWU_", "provideUserInformation": true } An example response looks like: { "responseHeader": { "responseTimestamp": { "epochMillis": "1481900013178" } }, "result": { "success": { "vendorPaymentToken": "ZXhhbXBsZSB1bmlxdWUgcGF5bWVudCB0b2tlbiB2YWx1ZQ", "tokenExpirationTime": { "epochMillis": "1481919332394" }, "bankAccountIdentifier": { "singaporeBankAccount": { "sgFastBankAccount": { "localAccountNumber": "113A", "swiftBic": { "value": "COBADEFF478" } }, "localBankIdentifier":{ "localBankCode": "7171", "localBranchCode": "060" } } }, "bankAccountDetails" : { "accountNumberSuffix": "1234", "bankAccountType": { "type": "SAVINGS" }, "bankAccountMetadata": { } }, "transactionLimits": { "transactionMaxLimit": { "noLimit": {} } }, "userInformation": { "name": "Example Customer", "addressLine": ["70 Pasir Panjang Rd"], "localityName": "#03-71", "postalCodeNumber": "117371", "countryCode": "SG" } } } } */
    post: operations["AssociateAccountWithVendorGeneratedToken"];
  };
  "/v2/disassociateAccount": {
    /** Deletes the association between the customer's account with the payment processor and the Google instrument. This disassociation should be processed idempotently, so if the same requestId is used as a previously processed request, the previous result should be idempotently returned. Otherwise if Google sends a `googlePaymentToken` that has already been disassociated, an error should be returned. An example request looks like: { "requestHeader": { "protocolVersion": { "major": 2 }, "requestId": "bWVyY2hhbnQgdHJhbnNhY3Rpb24gaWQ", "requestTimestamp": { "epochMillis": "0" }, "paymentIntegratorAccountId": "InvisiCashUSD" }, "googlePaymentToken": { "issuerId": { "value": "InvisiCashUSA" }, "token": "ZXhhbXBsZSB1bmlxdWUgcGF5bWVudCB0b2tlbiB2YWx1ZQ" } } An example response looks like: { "responseHeader": { "responseTimestamp": { "epochMillis": "1481900013178" } }, "result": {"success": {}} } */
    post: operations["DisassociateAccount"];
  };
  "/v3/transferFunds": {
    /** Initiates money movement between a customer's account held with Google and the payment processor. The combination of `requestId` within the header and `paymentIntegratorAccountId` is the idempotency key and uniquely identifies this transaction. All mutations on this transaction (refunds) populate the `requestId` value in the `capture_request_id` field. An example request looks like: { "requestHeader": { "protocolVersion": { "major": 2 }, "requestId": "bWVyY2hhbnQgdHJhbnNhY3Rpb24gaWQ", "requestTimestamp": { "epochMillis": "1502220196077" }, "paymentIntegratorAccountId": "InvisiCashUSA_USD" }, "googlePaymentToken": { "issuerId": { "value": "InvisiCash" }, "token": "ZXhhbXBsZSB1bmlxdWUgcGF5bWVudCB0b2tlbiB2YWx1ZQ" }, "transactionDescription": "Google - Music", "amount": { "amountMicros": "728000000", "currencyCode": "INR" }, "destinationBankAccount": { "bankAccountId": { "accountNumber": { "localAccountNumber": "1234-5678-91" }, "swiftBic": "XXXXSGS0XXX" }, "bankAccountOwner": { "name": "Sam User" } }, "transferFundsContext": {} } An example response looks like: { "responseHeader": { "responseTimestamp": { "epochMillis": "1481900013178" } }, "result": {"success": {}}, "paymentIntegratorTransactionId": "aW50ZWdyYXRvciB0cmFuc2FjdGlvbiBpZA" } */
    post: operations["TransferFunds"];
  };
  "/v3/getTransferFundsQuotation": {
    /** GetTransferFundsQuotation. The goal of this RPC is to obtain the relevant information about a transfer to present those details to the user for their evaluation. The evaluation criteria can be presented in the form of a set of challenges, such as: 1) Acknowledgement of the resolved identity of the payee proxy; Note: we will omit this for the first iteration; we assume that payee proxy lookup has already been performed in a previous GetPayeeProxyDisplayInfo call. 2) Agreement to quoted transfer parameters, including calculated transfer fees, 3) Re-authentication or 2FA, e.g. OTP. If the user approves of the terms of a transfer, a subsequent TransferFunds call is made. An example request looks like: { "requestHeader": { "protocolVersion": { "major": 2 }, "requestId": "bWVyY2hhbnQgdHJhbnN", "requestTimestamp": { "epochMillis": "1502220196077" }, "paymentIntegratorAccountId": "Mojaloop" }, "associationId": "ZXhhbXBsZSB1bmlxdWUgcGF5bWVudC", "transactionDescription": "Payment", "amount": { "amountMicros": "5000000", "currencyCode": "SGD" }, "payeeProxy": { "payeeProxyKey": { "networkId": "paynow", "phoneNumber": "+6577778888" }, "payeeProxyLookupRequestId": "bWVyY2hhbnQgdHJhbnN" } } */
    post: operations["GetQuotation"];
  };
  "/v2/disburse": {
    /** This method performs a disburse from a Google-owned bank account to an account specified in the request. */
    post: operations["Disburse"];
  };
  "/v2/getTransferFundsTransactionStatus": {
    /** This method fetches the status of a TransferFunds transaction. */
    post: operations["GetTransferFundsTransactionStatus"];
  };
  "/v2/getDisburseTransactionStatus": {
    /** This method fetches the status of a disburse transaction. */
    post: operations["GetDisburseTransactionStatus"];
  };
  "/v2/getPayeeProxyRegistrationStatus": {
    /** Checks whether or not a mapping to a Payee has been registered for the specified proxy key. An example request looks like: { "requestHeader": { "protocolVersion": { "major": 2 }, "requestId": "bWVyY2hhbnQgdHJhbnNhY3Rpb24gaWQ", "requestTimestamp": { "epochMillis": "1502220196077" }, "paymentIntegratorAccountId": "InvisiCashUSA_USD" }, "proxyKey": { "phoneNumber": "+001234567890" } } An example response looks like: { "responseHeader": { "responseTimestamp": { "epochMillis": "1481900013178" } }, "registrationStatus": "REGISTERED" } */
    post: operations["GetPayeeProxyRegistrationStatus"];
  };
  "/v2/getPayeeProxyDisplayInfo": {
    /** Returns the display data that has been registered for the specified proxy key (e.g. display name to be shown before payment) An example request looks like: { "requestHeader": { "protocolVersion": { "major": 2 }, "requestId": "bWVyY2hhbnQgdHJhbnNhY3Rpb24gaWQ", "requestTimestamp": { "epochMillis": "1502220196077" }, "paymentIntegratorAccountId": "InvisiCashUSA_USD" }, "proxyKey": { "phoneNumber": "+001234567890" } } An example response looks like: { "responseHeader": { "responseTimestamp": { "epochMillis": "1481900013178" } }, "displayInfoResult": { "success": { "displayInfo": { "displayName": "Sam Payee" } } } } */
    post: operations["GetPayeeProxyDisplayInfo"];
  };
}

export interface components {
  schemas: {
    AssociateAccountRequest: {
      requestHeader?: components["schemas"]["GoogleStandardPaymentsTypesV2RequestHeader"];
      authenticationRequestId?: string;
      provideUserInformation?: boolean;
      googlePaymentToken?: components["schemas"]["GoogleStandardPaymentsTypesV2GooglePaymentToken"];
      associationId?: string;
    };
    GoogleStandardPaymentsTypesV2RequestHeader: {
      requestId?: string;
      requestTimestamp?: components["schemas"]["GoogleStandardPaymentsTypesV2Timestamp"];
      protocolVersion?: components["schemas"]["GoogleStandardPaymentsTypesV2Version"];
      paymentIntegratorAccountId?: string;
    };
    GoogleStandardPaymentsTypesV2Timestamp: {
      epochMillis?: string;
    };
    GoogleStandardPaymentsTypesV2Version: {
      major?: number;
    };
    GoogleStandardPaymentsTypesV2GooglePaymentToken: {
      issuerId?: components["schemas"]["GoogleStandardPaymentsTypesV2IssuerId"];
      token?: string;
    };
    GoogleStandardPaymentsTypesV2IssuerId: {
      value?: string;
    };
    AssociateAccountResponse: {
      responseHeader?: components["schemas"]["GoogleStandardPaymentsTypesV2ResponseHeader"];
      result?: components["schemas"]["AssociateAccountResponseAssociateAccountResult"];
    };
    GoogleStandardPaymentsTypesV2ResponseHeader: {
      responseTimestamp?: components["schemas"]["GoogleStandardPaymentsTypesV2Timestamp"];
    };
    AssociateAccountResponseAssociateAccountResult: {
      success?: components["schemas"]["AssociateAccountResponseAssociateAccountResultSuccessDetails"];
      userAuthenticationFailed?: components["schemas"]["GoogleStandardPaymentsTypesV2Empty"];
      notEligible?: components["schemas"]["GoogleStandardPaymentsTypesV2Empty"];
      otpNotMatched?: components["schemas"]["GoogleStandardPaymentsTypesV2Empty"];
      otpAlreadyUsed?: components["schemas"]["GoogleStandardPaymentsTypesV2Empty"];
      otpLimitReached?: components["schemas"]["GoogleStandardPaymentsTypesV2Empty"];
    };
    AssociateAccountResponseAssociateAccountResultSuccessDetails: {
      associatedAccountIdentifier?: components["schemas"]["AssociatedAccountIdentifier"];
      bankAccountIdentifier?: components["schemas"]["GoogleStandardPaymentsTypesV2BankAccountIdentifier"];
      associatedAccountDetails?: components["schemas"]["AssociatedAccountDetails"];
      bankAccountDetails?: components["schemas"]["MaskedBankAccountDetails"];
      transactionLimits?: components["schemas"]["TransactionLimits"];
      userInformation?: components["schemas"]["GoogleStandardPaymentsTypesV2UserInformation"];
    };
    AssociatedAccountIdentifier: {
      accountId?: string;
    };
    GoogleStandardPaymentsTypesV2BankAccountIdentifier: {
      singaporeBankAccount?: components["schemas"]["GoogleStandardPaymentsTypesV2SgBankAccount"];
      usBankAccount?: components["schemas"]["GoogleStandardPaymentsTypesV2UsBankAccount"];
      japanBankAccount?: components["schemas"]["GoogleStandardPaymentsTypesV2JapanBankAccount"];
    };
    GoogleStandardPaymentsTypesV2SgBankAccount: {
      sgFastBankAccount?: components["schemas"]["GoogleStandardPaymentsTypesV2SgFastBankAccount"];
      localBankIdentifier?: components["schemas"]["GoogleStandardPaymentsTypesV2SgLocalBankIdentifier"];
    };
    GoogleStandardPaymentsTypesV2SgFastBankAccount: {
      localAccountNumber?: string;
      swiftBic?: components["schemas"]["GoogleStandardPaymentsTypesV2SwiftBusinessIdentifierCode"];
    };
    GoogleStandardPaymentsTypesV2SwiftBusinessIdentifierCode: {
      value?: string;
    };
    GoogleStandardPaymentsTypesV2SgLocalBankIdentifier: {
      localBankCode?: string;
      localBranchCode?: string;
    };
    GoogleStandardPaymentsTypesV2UsBankAccount: {
      accountNumber?: components["schemas"]["GoogleStandardPaymentsTypesV2DomesticBankAccountNumber"];
      bankIdentifier?: components["schemas"]["GoogleStandardPaymentsTypesV2UsBankIdentifier"];
    };
    GoogleStandardPaymentsTypesV2DomesticBankAccountNumber: {
      number?: string;
    };
    GoogleStandardPaymentsTypesV2UsBankIdentifier: {
      swiftBic?: components["schemas"]["GoogleStandardPaymentsTypesV2SwiftBusinessIdentifierCode"];
      usAbaRoutingNumber?: components["schemas"]["GoogleStandardPaymentsTypesV2AbaRoutingTransitNumber"];
    };
    GoogleStandardPaymentsTypesV2AbaRoutingTransitNumber: {
      value?: string;
    };
    GoogleStandardPaymentsTypesV2JapanBankAccount: {
      localAccountNumber?: string;
      localBankIdentifier?: components["schemas"]["GoogleStandardPaymentsTypesV2JapanLocalBankIdentifier"];
    };
    GoogleStandardPaymentsTypesV2JapanLocalBankIdentifier: {
      localBankCode?: string;
      localBranchCode?: string;
    };
    AssociatedAccountDetails: {
      accountNickname?: components["schemas"]["AssociatedAccountNickname"];
      accountAlias?: components["schemas"]["GoogleStandardPaymentsTypesTokenizedFopV2AccountAlias"];
      accountType?: components["schemas"]["AccountType"];
    };
    AssociatedAccountNickname: {
      partialAccountNickname?: string;
      fullAccountNickname?: string;
    };
    GoogleStandardPaymentsTypesTokenizedFopV2AccountAlias: {
      phoneNumber?: components["schemas"]["GoogleStandardPaymentsTypesV2PhoneNumber"];
      emailAddress?: string;
    };
    GoogleStandardPaymentsTypesV2PhoneNumber: {
      value?: string;
    };
    AccountType: {
      wirelessCarrierAccountType?: components["schemas"]["WirelessCarrierAccountType"];
    };
    WirelessCarrierAccountType: {
      prepaid?: components["schemas"]["GoogleStandardPaymentsTypesV2Empty"];
      postpaid?: components["schemas"]["GoogleStandardPaymentsTypesV2Empty"];
      enterprise?: components["schemas"]["GoogleStandardPaymentsTypesV2Empty"];
      willNotProvidePii?: components["schemas"]["GoogleStandardPaymentsTypesV2Empty"];
      controlPlan?: components["schemas"]["GoogleStandardPaymentsTypesV2Empty"];
    };
    GoogleStandardPaymentsTypesV2Empty: { [key: string]: unknown };
    MaskedBankAccountDetails: {
      accountNumberSuffix?: string;
      bankAccountType?: components["schemas"]["GoogleStandardPaymentsTypesV2BankAccountType"];
      bankAccountMetadata?: components["schemas"]["BankAccountMetadata"];
    };
    GoogleStandardPaymentsTypesV2BankAccountType: {
      /** @enum {string} */
      type?: "TYPE_UNSPECIFIED" | "SAVINGS" | "CHECKING" | "CURRENT";
    };
    BankAccountMetadata: {
      bankingProductName?: string;
    };
    TransactionLimits: {
      transactionMaxLimit?: components["schemas"]["GoogleStandardPaymentsTypesV2TransactionLimit"];
    };
    GoogleStandardPaymentsTypesV2TransactionLimit: {
      limitAmount?: components["schemas"]["GoogleStandardPaymentsTypesV2Amount"];
      noLimit?: components["schemas"]["GoogleStandardPaymentsTypesV2Empty"];
    };
    GoogleStandardPaymentsTypesV2Amount: {
      amountMicros?: string;
      currencyCode?: string;
    };
    GoogleStandardPaymentsTypesV2UserInformation: {
      name?: string;
      addressLine?: string[];
      localityName?: string;
      administrativeAreaName?: string;
      postalCodeNumber?: string;
      countryCode?: string;
      phone?: string;
      emailAddress?: string;
    };
    AssociateAccountWithVendorGeneratedTokenRequest: {
      requestHeader?: components["schemas"]["GoogleStandardPaymentsTypesV2RequestHeader"];
      authenticationRequestId?: string;
      otpVerification?: components["schemas"]["GoogleStandardPaymentsTypesV1OtpVerification"];
      provideUserInformation?: boolean;
      associationId?: string;
    };
    GoogleStandardPaymentsTypesV1OtpVerification: {
      sendOtpRequestId?: string;
      otp?: string;
    };
    AssociateAccountWithVendorGeneratedTokenResponse: {
      responseHeader?: components["schemas"]["GoogleStandardPaymentsTypesV2ResponseHeader"];
      paymentIntegratorAssociateAccountId?: string;
      result?: components["schemas"]["AssociateAccountWithVendorGeneratedTokenResponseAssociateAccountResult"];
    };
    AssociateAccountWithVendorGeneratedTokenResponseAssociateAccountResult: {
      success?: components["schemas"]["AssociateAccountWithVendorGeneratedTokenResponseAssociateAccountResultSuccessDetails"];
      userAuthenticationFailed?: components["schemas"]["GoogleStandardPaymentsTypesV2UserAuthenticationFailed"];
      notEligible?: components["schemas"]["GoogleStandardPaymentsTypesV2AccountNotEligible"];
      otpNotMatched?: components["schemas"]["GoogleStandardPaymentsTypesV2OtpNotMatched"];
      otpAlreadyUsed?: components["schemas"]["GoogleStandardPaymentsTypesV2OtpAlreadyUsed"];
      otpLimitReached?: components["schemas"]["GoogleStandardPaymentsTypesV2OtpLimitReached"];
    };
    AssociateAccountWithVendorGeneratedTokenResponseAssociateAccountResultSuccessDetails: {
      vendorPaymentToken?: string;
      tokenExpirationTime?: components["schemas"]["GoogleStandardPaymentsTypesV1Timestamp"];
      accountDetails?: components["schemas"]["AssociatedAccountDetails"];
      accountId?: components["schemas"]["AssociatedAccountIdentifier"];
      associatedAccountIdentifier?: components["schemas"]["AssociatedAccountIdentifier"];
      bankAccountIdentifier?: components["schemas"]["GoogleStandardPaymentsTypesV2BankAccountIdentifier"];
      associatedAccountDetails?: components["schemas"]["AssociatedAccountDetails"];
      bankAccountDetails?: components["schemas"]["MaskedBankAccountDetails"];
      transactionLimits?: components["schemas"]["TransactionLimits"];
      userInformation?: components["schemas"]["GoogleStandardPaymentsTypesV1UserInformation"];
    };
    GoogleStandardPaymentsTypesV1Timestamp: {
      epochMillis?: string;
    };
    GoogleStandardPaymentsTypesV1UserInformation: {
      name?: string;
      addressLine?: string[];
      localityName?: string;
      administrativeAreaName?: string;
      postalCodeNumber?: string;
      countryCode?: string;
      phone?: string;
      emailAddress?: string;
    };
    GoogleStandardPaymentsTypesV2UserAuthenticationFailed: {
      rawResult?: components["schemas"]["GoogleStandardPaymentsTypesV2RawResult"];
    };
    GoogleStandardPaymentsTypesV2RawResult: {
      scope?: string;
      rawCode?: string;
    };
    GoogleStandardPaymentsTypesV2AccountNotEligible: {
      rawResult?: components["schemas"]["GoogleStandardPaymentsTypesV2RawResult"];
    };
    GoogleStandardPaymentsTypesV2OtpNotMatched: {
      rawResult?: components["schemas"]["GoogleStandardPaymentsTypesV2RawResult"];
    };
    GoogleStandardPaymentsTypesV2OtpAlreadyUsed: {
      rawResult?: components["schemas"]["GoogleStandardPaymentsTypesV2RawResult"];
    };
    GoogleStandardPaymentsTypesV2OtpLimitReached: {
      rawResult?: components["schemas"]["GoogleStandardPaymentsTypesV2RawResult"];
    };
    DisassociateAccountRequest: {
      requestHeader?: components["schemas"]["GoogleStandardPaymentsTypesV2RequestHeader"];
      googlePaymentToken?: components["schemas"]["GoogleStandardPaymentsTypesV1GooglePaymentToken"];
      vendorPaymentToken?: components["schemas"]["GoogleStandardPaymentsTypesV1VendorPaymentToken"];
    };
    GoogleStandardPaymentsTypesV1GooglePaymentToken: {
      issuerId?: components["schemas"]["GoogleStandardPaymentsTypesV1IssuerId"];
      token?: string;
    };
    GoogleStandardPaymentsTypesV3ChallengeResults: {
      challengeOptionId?: string;
      fidoAssertion?: components["schemas"]["GoogleStandardPaymentsTypesV3FidoAssertion"];
    };
    GoogleStandardPaymentsTypesV3FidoAssertion: {
      rawId?: string;
      id?: string;
      response?: components["schemas"]["GoogleStandardPaymentsTypesV3FidoAssertionResponse"];
      type?: string;
    };
    GoogleStandardPaymentsTypesV3FidoAssertionResponse: {
      authenticatorData?: string;
      signature?: string;
      userHandle?: string;
      clientDataJSON?: string;
    };
    GoogleStandardPaymentsTypesV1IssuerId: {
      value?: string;
    };
    GoogleStandardPaymentsTypesV1VendorPaymentToken: {
      issuerId?: components["schemas"]["GoogleStandardPaymentsTypesV1IssuerId"];
      token?: string;
    };
    DisassociateAccountResponse: {
      responseHeader?: components["schemas"]["GoogleStandardPaymentsTypesV2ResponseHeader"];
      result?: components["schemas"]["DisassociateAccountResponseDisassociateAccountResult"];
    };
    DisassociateAccountResponseDisassociateAccountResult: {
      success?: components["schemas"]["GoogleStandardPaymentsTypesV2Empty"];
    };
    TransferFundsRequest: {
      requestHeader?: components["schemas"]["GoogleStandardPaymentsTypesV2RequestHeader"];
      googlePaymentToken?: components["schemas"]["GoogleStandardPaymentsTypesV1GooglePaymentToken"];
      vendorPaymentToken?: components["schemas"]["GoogleStandardPaymentsTypesV1VendorPaymentToken"];
      transactionDescription?: string;
      amount?: components["schemas"]["GoogleStandardPaymentsTypesV1Amount"];
      payeeProxy?: components["schemas"]["PayeeProxyDestination"];
      getTransferFundsQuotationRequestId?: string;
      challengeResults?: components["schemas"]["GoogleStandardPaymentsTypesV3ChallengeResults"];
    };
    GetTransferFundsQuotationRequest: {
      requestHeader?: components["schemas"]["GoogleStandardPaymentsTypesV2RequestHeader"];
      associationId?: string;
      transactionDescription?: string;
      amount?: components["schemas"]["GoogleStandardPaymentsTypesV1Amount"];
      payeeProxy?: components["schemas"]["PayeeProxyDestination"];
      googlePaymentToken?: components["schemas"]["GoogleStandardPaymentsTypesV2GooglePaymentToken"];
    };
    /** @description GetTransferFundsQuotationResponse */
    GetTransferFundsQuotationResponse: unknown;
    GoogleStandardPaymentsTypesV3Result: {
      success?: components["schemas"]["GoogleStandardPaymentsTypesV3Success"];
    };
    GoogleStandardPaymentsTypesV3Success: {
      feeAmount?: components["schemas"]["GoogleStandardPaymentsTypesV2Amount"];
      challengeOptions?: components["schemas"]["GoogleStandardPaymentsTypesV3ChallengeOptions"];
    };
    GoogleStandardPaymentsTypesV3ChallengeOptions: {
      challengeOptionId?: string;
      fido?: components["schemas"]["GoogleStandardPaymentsTypesV3Fido"];
    };
    GoogleStandardPaymentsTypesV3Fido: {
      challenge?: string;
      allowCredentials?: components["schemas"]["GoogleStandardPaymentsTypesV3AllowCredentials"];
    };
    GoogleStandardPaymentsTypesV3AllowCredentials: {
      type?: string;
      id?: string;
    };
    GoogleStandardPaymentsTypesV1Amount: {
      amountMicros?: string;
      currencyCode?: string;
    };
    GoogleBankAccount: {
      bankAccountId?: components["schemas"]["GoogleStandardPaymentsTypesV2BankAccountIdentifier"];
    };
    DestinationBankAccount: {
      bankAccountId?: components["schemas"]["GoogleStandardPaymentsTypesV2BankAccountIdentifier"];
      bankAccountOwner?: components["schemas"]["BankAccountOwner"];
    };
    BankAccountOwner: {
      name?: string;
    };
    PayeeProxyDestination: {
      payeeProxyKey?: components["schemas"]["PayeeProxyKey"];
      payeeProxyLookupRequestId?: string;
    };
    PayeeProxyKey: {
      phoneNumber?: string;
      nationalId?: components["schemas"]["ProxyKeyNationalId"];
      businessId?: string;
      virtualPaymentAddress?: string;
      networkId?: string;
    };
    ProxyKeyNationalId: {
      nationalId?: string;
      issuingCountryCode?: string;
    };
    /** @description TransferFundsResponse */
    TransferFundsResponse: unknown;
    TransferFundsResponseTransferFundsResult: {
      success?: components["schemas"]["GoogleStandardPaymentsTypesV2Empty"];
      chargeExceedsTransactionLimit?: components["schemas"]["GoogleStandardPaymentsTypesV2ChargeExceedsTransactionLimit"];
      chargeExceedsDailyLimit?: components["schemas"]["GoogleStandardPaymentsTypesV2ChargeExceedsDailyLimit"];
      chargeExceedsMonthlyLimit?: components["schemas"]["GoogleStandardPaymentsTypesV2ChargeExceedsMonthlyLimit"];
      chargeUnderLimit?: components["schemas"]["GoogleStandardPaymentsTypesV2ChargeUnderLimit"];
      insufficientFunds?: components["schemas"]["GoogleStandardPaymentsTypesV2InsufficientFunds"];
      accountDoesNotSupportCurrency?: components["schemas"]["GoogleStandardPaymentsTypesV2AccountDoesNotSupportCurrency"];
      accountClosed?: components["schemas"]["GoogleStandardPaymentsTypesV2AccountClosed"];
      accountClosedAccountTakenOver?: components["schemas"]["GoogleStandardPaymentsTypesV2AccountClosedAccountTakenOver"];
      accountOnHold?: components["schemas"]["GoogleStandardPaymentsTypesV2AccountOnHold"];
      accountClosedFraud?: components["schemas"]["GoogleStandardPaymentsTypesV2AccountClosedFraud"];
      googlePaymentTokenInvalidatedByUser?: components["schemas"]["GoogleStandardPaymentsTypesV2GooglePaymentTokenInvalidatedByUser"];
      tokenRefreshRequired?: components["schemas"]["GoogleStandardPaymentsTypesV2TokenRefreshRequired"];
      payeeProxyNotRegistered?: components["schemas"]["GoogleStandardPaymentsTypesV2PayeeProxyNotRegistered"];
    };
    GoogleStandardPaymentsTypesV2ChargeExceedsTransactionLimit: {
      rawResult?: components["schemas"]["GoogleStandardPaymentsTypesV2RawResult"];
      transactionLimit?: components["schemas"]["GoogleStandardPaymentsTypesV2Amount"];
    };
    GoogleStandardPaymentsTypesV2ChargeExceedsDailyLimit: {
      rawResult?: components["schemas"]["GoogleStandardPaymentsTypesV2RawResult"];
    };
    GoogleStandardPaymentsTypesV2ChargeExceedsMonthlyLimit: {
      rawResult?: components["schemas"]["GoogleStandardPaymentsTypesV2RawResult"];
    };
    GoogleStandardPaymentsTypesV2ChargeUnderLimit: {
      rawResult?: components["schemas"]["GoogleStandardPaymentsTypesV2RawResult"];
      minimumTransactionLimit?: components["schemas"]["GoogleStandardPaymentsTypesV2Amount"];
    };
    GoogleStandardPaymentsTypesV2InsufficientFunds: {
      rawResult?: components["schemas"]["GoogleStandardPaymentsTypesV2RawResult"];
      currentBalance?: components["schemas"]["GoogleStandardPaymentsTypesV2Amount"];
    };
    GoogleStandardPaymentsTypesV2AccountDoesNotSupportCurrency: {
      rawResult?: components["schemas"]["GoogleStandardPaymentsTypesV2RawResult"];
    };
    GoogleStandardPaymentsTypesV2AccountClosed: {
      rawResult?: components["schemas"]["GoogleStandardPaymentsTypesV2RawResult"];
    };
    GoogleStandardPaymentsTypesV2AccountClosedAccountTakenOver: {
      rawResult?: components["schemas"]["GoogleStandardPaymentsTypesV2RawResult"];
    };
    GoogleStandardPaymentsTypesV2AccountOnHold: {
      rawResult?: components["schemas"]["GoogleStandardPaymentsTypesV2RawResult"];
    };
    GoogleStandardPaymentsTypesV2AccountClosedFraud: {
      rawResult?: components["schemas"]["GoogleStandardPaymentsTypesV2RawResult"];
    };
    GoogleStandardPaymentsTypesV2GooglePaymentTokenInvalidatedByUser: {
      rawResult?: components["schemas"]["GoogleStandardPaymentsTypesV2RawResult"];
    };
    GoogleStandardPaymentsTypesV2TokenRefreshRequired: {
      rawResult?: components["schemas"]["GoogleStandardPaymentsTypesV2RawResult"];
    };
    GoogleStandardPaymentsTypesV2PayeeProxyNotRegistered: {
      rawResult?: components["schemas"]["GoogleStandardPaymentsTypesV2RawResult"];
    };
    TransactionResultNotKnownYet: {
      creditStatusUnknown?: components["schemas"]["GoogleStandardPaymentsTypesV2Empty"];
    };
    DisburseRequest: {
      requestHeader?: components["schemas"]["GoogleStandardPaymentsTypesV2RequestHeader"];
      sourceGoogleBankAccount?: components["schemas"]["GoogleBankAccount"];
      destinationBankAccount?: components["schemas"]["DestinationBankAccount"];
      payeeProxyKey?: components["schemas"]["PayeeProxyKey"];
      amount?: components["schemas"]["GoogleStandardPaymentsTypesV1Amount"];
      transactionDescription?: string;
    };
    DisburseResponse: {
      responseHeader?: components["schemas"]["GoogleStandardPaymentsTypesV2ResponseHeader"];
      paymentIntegratorTransactionId?: string;
      result?: components["schemas"]["GoogleStandardPaymentsTypesBankingFopV2DisburseResult"];
      resultNotKnownYet?: components["schemas"]["TransactionResultNotKnownYet"];
    };
    GoogleStandardPaymentsTypesBankingFopV2DisburseResult: {
      success?: components["schemas"]["GoogleStandardPaymentsTypesV2Empty"];
      accountDoesNotSupportCurrency?: components["schemas"]["GoogleStandardPaymentsTypesV2AccountDoesNotSupportCurrency"];
      accountClosed?: components["schemas"]["GoogleStandardPaymentsTypesV2AccountClosed"];
      payeeProxyNotRegistered?: components["schemas"]["GoogleStandardPaymentsTypesV2PayeeProxyNotRegistered"];
    };
    GetTransferFundsTransactionStatusRequest: {
      requestHeader?: components["schemas"]["GoogleStandardPaymentsTypesV2RequestHeader"];
      transferFundsRequestId?: string;
    };
    GetTransferFundsTransactionStatusResponse: {
      responseHeader?: components["schemas"]["GoogleStandardPaymentsTypesV2ResponseHeader"];
      result?: components["schemas"]["GetTransactionStatusResult"];
      transferFundsResult?: components["schemas"]["TransferFundsResponseTransferFundsResult"];
      transactionDoesNotExist?: components["schemas"]["GoogleStandardPaymentsTypesV2Empty"];
      resultNotKnownYet?: components["schemas"]["TransactionResultNotKnownYet"];
    };
    GetTransactionStatusResult: {
      success?: components["schemas"]["GoogleStandardPaymentsTypesV2Empty"];
    };
    GetDisburseTransactionStatusRequest: {
      requestHeader?: components["schemas"]["GoogleStandardPaymentsTypesV2RequestHeader"];
      disburseRequestId?: string;
      paymentIntegratorAccountId?: string;
    };
    GetDisburseTransactionStatusResponse: {
      responseHeader?: components["schemas"]["GoogleStandardPaymentsTypesV2ResponseHeader"];
      result?: components["schemas"]["GetTransactionStatusResult"];
      disburseResult?: components["schemas"]["GoogleStandardPaymentsTypesBankingFopV2DisburseResult"];
      transactionDoesNotExist?: components["schemas"]["GoogleStandardPaymentsTypesV2Empty"];
      resultNotKnownYet?: components["schemas"]["TransactionResultNotKnownYet"];
    };
    GetPayeeProxyRegistrationStatusRequest: {
      requestHeader?: components["schemas"]["GoogleStandardPaymentsTypesV2RequestHeader"];
      proxyKey?: components["schemas"]["PayeeProxyKey"];
    };
    GetPayeeProxyRegistrationStatusResponse: {
      responseHeader?: components["schemas"]["GoogleStandardPaymentsTypesV2ResponseHeader"];
      /** @enum {string} */
      registrationStatus?:
        | "PAYEE_PROXY_REGISTRATION_STATUS_UNSPECIFIED"
        | "REGISTERED"
        | "NOT_REGISTERED";
    };
    GetPayeeProxyDisplayInfoRequest: {
      requestHeader?: components["schemas"]["GoogleStandardPaymentsTypesV2RequestHeader"];
      proxyKey?: components["schemas"]["PayeeProxyKey"];
      associationId?: string;
    };
    GetPayeeProxyDisplayInfoResponse: {
      responseHeader?: components["schemas"]["GoogleStandardPaymentsTypesV2ResponseHeader"];
      displayInfoResult?: components["schemas"]["GetPayeeProxyDisplayInfoResponseGetPayeeProxyDisplayInfoResult"];
    };
    GetPayeeProxyDisplayInfoResponseGetPayeeProxyDisplayInfoResult: {
      success?: components["schemas"]["PayeeProxyDisplayInfoSuccess"];
      failure?: components["schemas"]["PayeeProxyDisplayInfoFailure"];
    };
    PayeeProxyDisplayInfoSuccess: {
      displayInfo?: components["schemas"]["PayeeProxyDisplayInfo"];
    };
    PayeeProxyDisplayInfo: {
      displayName?: string;
    };
    PayeeProxyDisplayInfoFailure: {
      /** @enum {string} */
      failureReason?:
        | "PAYEE_PROXY_DISPLAY_INFO_FAILURE_REASON_UNSPECIFIED"
        | "PROXY_KEY_NOT_REGISTERED";
    };
  };
}

export interface operations {
  /** Associates the customer's account with the payment processor to the Google instrument being added. Account association happens after the integrator has authenticated the user. Association occurs via a server-to-server call that contains the `requestId` for the associated authentication flow (`authenticationRequestId`), an `associationId` and a `googlePaymentToken` (GPT). The payment processor should associate the `associationId` and the `googlePaymentToken` to the customer's account for authentication. The GPT is used to initiate payments. The `associationId` is used during re-authentication calls to identify the account for authentication. If Google sends an `associationId` or a `googlePaymentToken` that the integrator has already seen during a different association, then it throws an error. An example request looks like: { "requestHeader": { "protocolVersion": { "major": 2 }, "requestId": "bWVyY2hhbnQgdHJhbnNhY3Rpb24gaWQ", "requestTimestamp": { "epochMillis": "1502220196077" }, "paymentIntegratorAccountId": "InvisiCashUSD" }, "authenticationRequestId": "bnAxdWTydDX==", "googlePaymentToken": { "issuerId": { "value": "InvisiCashUSA" }, "token": "ZXhhbXBsZSB1bmlxdWUgcGF5bWVudCB0b2tlbiB2YWx1ZQ" }, "associationId": "LmddbXBsZSByZWZlcmVuY2UgdG9rZW4gdmFsdWU", "provideUserInformation": true } An example response looks like: { "responseHeader": { "responseTimestamp": { "epochMillis": "1481900013178" } }, "result": { "success": { "bankAccountIdentifier": { "singaporeBankAccount": { "sgFastBankAccount": { "localAccountNumber": "113A", "swiftBic": { "value": "COBADEFF478" } }, "localBankIdentifier":{ "localBankCode": "7171", "localBranchCode": "060" } } }, "bankAccountDetails" : { "accountNumberSuffix": "1234", "bankAccountType": { "type": "SAVINGS" }, "bankAccountMetadata": { } }, "transactionLimits": { "transactionMaxLimit": { "noLimit": {} } }, "userInformation": { "name": "Example Customer", "addressLine": ["70 Pasir Panjang Rd"], "localityName": "#03-71", "postalCodeNumber": "117371", "countryCode": "SG" } } } } */
  AssociateAccount: {
    responses: {
      default: components["schemas"]["AssociateAccountResponse"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssociateAccountRequest"];
      };
    };
  };
  /** Associates the customer's account with the payment processor to the Google instrument being added. Account association happens after the integrator has authenticated the user. Association occurs via a server-to-server call that contains the `requestId` for the associated authentication flow (`authenticationRequestId`) and an `associationId`.The payment processor should associate the `associationId` to the customer's account. The `associationId` is used during re-authentication calls to identify the account for authentication. If Google sends an `associationId` that the integrator has already seen during a different association, then it throws an error. In the response, the payment processor generates a 'vendorPaymentToken' which is bound to the customer's account and is used for authorizing subsequent payments. An example request looks like: { "requestHeader": { "protocolVersion": { "major": 2 }, "requestId": "bWVyY2hhbnQgdHJhbnNhY3Rpb24gaWQ", "requestTimestamp": { "epochMillis": "1502220196077" }, "paymentIntegratorAccountId": "InvisiCashUSD" }, "authenticationRequestId": "bnAxdWTydDX==", "associationId": "LmddbXBsZSByZWZlcmVuY2UgdG9rZW4gdmFsdWU_", "provideUserInformation": true } An example response looks like: { "responseHeader": { "responseTimestamp": { "epochMillis": "1481900013178" } }, "result": { "success": { "vendorPaymentToken": "ZXhhbXBsZSB1bmlxdWUgcGF5bWVudCB0b2tlbiB2YWx1ZQ", "tokenExpirationTime": { "epochMillis": "1481919332394" }, "bankAccountIdentifier": { "singaporeBankAccount": { "sgFastBankAccount": { "localAccountNumber": "113A", "swiftBic": { "value": "COBADEFF478" } }, "localBankIdentifier":{ "localBankCode": "7171", "localBranchCode": "060" } } }, "bankAccountDetails" : { "accountNumberSuffix": "1234", "bankAccountType": { "type": "SAVINGS" }, "bankAccountMetadata": { } }, "transactionLimits": { "transactionMaxLimit": { "noLimit": {} } }, "userInformation": { "name": "Example Customer", "addressLine": ["70 Pasir Panjang Rd"], "localityName": "#03-71", "postalCodeNumber": "117371", "countryCode": "SG" } } } } */
  AssociateAccountWithVendorGeneratedToken: {
    responses: {
      default: components["schemas"]["AssociateAccountWithVendorGeneratedTokenResponse"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssociateAccountWithVendorGeneratedTokenRequest"];
      };
    };
  };
  /** Deletes the association between the customer's account with the payment processor and the Google instrument. This disassociation should be processed idempotently, so if the same requestId is used as a previously processed request, the previous result should be idempotently returned. Otherwise if Google sends a `googlePaymentToken` that has already been disassociated, an error should be returned. An example request looks like: { "requestHeader": { "protocolVersion": { "major": 2 }, "requestId": "bWVyY2hhbnQgdHJhbnNhY3Rpb24gaWQ", "requestTimestamp": { "epochMillis": "0" }, "paymentIntegratorAccountId": "InvisiCashUSD" }, "googlePaymentToken": { "issuerId": { "value": "InvisiCashUSA" }, "token": "ZXhhbXBsZSB1bmlxdWUgcGF5bWVudCB0b2tlbiB2YWx1ZQ" } } An example response looks like: { "responseHeader": { "responseTimestamp": { "epochMillis": "1481900013178" } }, "result": {"success": {}} } */
  DisassociateAccount: {
    responses: {
      default: components["schemas"]["DisassociateAccountResponse"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DisassociateAccountRequest"];
      };
    };
  };
  /** Initiates money movement between a customer's account held with Google and the payment processor. The combination of `requestId` within the header and `paymentIntegratorAccountId` is the idempotency key and uniquely identifies this transaction. All mutations on this transaction (refunds) populate the `requestId` value in the `capture_request_id` field. An example request looks like: { "requestHeader": { "protocolVersion": { "major": 2 }, "requestId": "bWVyY2hhbnQgdHJhbnNhY3Rpb24gaWQ", "requestTimestamp": { "epochMillis": "1502220196077" }, "paymentIntegratorAccountId": "InvisiCashUSA_USD" }, "googlePaymentToken": { "issuerId": { "value": "InvisiCash" }, "token": "ZXhhbXBsZSB1bmlxdWUgcGF5bWVudCB0b2tlbiB2YWx1ZQ" }, "transactionDescription": "Google - Music", "amount": { "amountMicros": "728000000", "currencyCode": "INR" }, "destinationBankAccount": { "bankAccountId": { "accountNumber": { "localAccountNumber": "1234-5678-91" }, "swiftBic": "XXXXSGS0XXX" }, "bankAccountOwner": { "name": "Sam User" } }, "transferFundsContext": {} } An example response looks like: { "responseHeader": { "responseTimestamp": { "epochMillis": "1481900013178" } }, "result": {"success": {}}, "paymentIntegratorTransactionId": "aW50ZWdyYXRvciB0cmFuc2FjdGlvbiBpZA" } */
  TransferFunds: {
    responses: {
      200: components["schemas"]["TransferFundsResponse"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferFundsRequest"];
      };
    };
  };
  /** GetTransferFundsQuotation. The goal of this RPC is to obtain the relevant information about a transfer to present those details to the user for their evaluation. The evaluation criteria can be presented in the form of a set of challenges, such as: 1) Acknowledgement of the resolved identity of the payee proxy; Note: we will omit this for the first iteration; we assume that payee proxy lookup has already been performed in a previous GetPayeeProxyDisplayInfo call. 2) Agreement to quoted transfer parameters, including calculated transfer fees, 3) Re-authentication or 2FA, e.g. OTP. If the user approves of the terms of a transfer, a subsequent TransferFunds call is made. An example request looks like: { "requestHeader": { "protocolVersion": { "major": 2 }, "requestId": "bWVyY2hhbnQgdHJhbnN", "requestTimestamp": { "epochMillis": "1502220196077" }, "paymentIntegratorAccountId": "Mojaloop" }, "associationId": "ZXhhbXBsZSB1bmlxdWUgcGF5bWVudC", "transactionDescription": "Payment", "amount": { "amountMicros": "5000000", "currencyCode": "SGD" }, "payeeProxy": { "payeeProxyKey": { "networkId": "paynow", "phoneNumber": "+6577778888" }, "payeeProxyLookupRequestId": "bWVyY2hhbnQgdHJhbnN" } } */
  GetQuotation: {
    responses: {
      200: components["schemas"]["GetTransferFundsQuotationResponse"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GetTransferFundsQuotationRequest"];
      };
    };
  };
  /** This method performs a disburse from a Google-owned bank account to an account specified in the request. */
  Disburse: {
    responses: {
      default: components["schemas"]["DisburseResponse"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DisburseRequest"];
      };
    };
  };
  /** This method fetches the status of a TransferFunds transaction. */
  GetTransferFundsTransactionStatus: {
    responses: {
      default: components["schemas"]["GetTransferFundsTransactionStatusResponse"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GetTransferFundsTransactionStatusRequest"];
      };
    };
  };
  /** This method fetches the status of a disburse transaction. */
  GetDisburseTransactionStatus: {
    responses: {
      default: components["schemas"]["GetDisburseTransactionStatusResponse"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GetDisburseTransactionStatusRequest"];
      };
    };
  };
  /** Checks whether or not a mapping to a Payee has been registered for the specified proxy key. An example request looks like: { "requestHeader": { "protocolVersion": { "major": 2 }, "requestId": "bWVyY2hhbnQgdHJhbnNhY3Rpb24gaWQ", "requestTimestamp": { "epochMillis": "1502220196077" }, "paymentIntegratorAccountId": "InvisiCashUSA_USD" }, "proxyKey": { "phoneNumber": "+001234567890" } } An example response looks like: { "responseHeader": { "responseTimestamp": { "epochMillis": "1481900013178" } }, "registrationStatus": "REGISTERED" } */
  GetPayeeProxyRegistrationStatus: {
    responses: {
      default: components["schemas"]["GetPayeeProxyRegistrationStatusResponse"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GetPayeeProxyRegistrationStatusRequest"];
      };
    };
  };
  /** Returns the display data that has been registered for the specified proxy key (e.g. display name to be shown before payment) An example request looks like: { "requestHeader": { "protocolVersion": { "major": 2 }, "requestId": "bWVyY2hhbnQgdHJhbnNhY3Rpb24gaWQ", "requestTimestamp": { "epochMillis": "1502220196077" }, "paymentIntegratorAccountId": "InvisiCashUSA_USD" }, "proxyKey": { "phoneNumber": "+001234567890" } } An example response looks like: { "responseHeader": { "responseTimestamp": { "epochMillis": "1481900013178" } }, "displayInfoResult": { "success": { "displayInfo": { "displayName": "Sam Payee" } } } } */
  GetPayeeProxyDisplayInfo: {
    responses: {
      default: components["schemas"]["GetPayeeProxyDisplayInfoResponse"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GetPayeeProxyDisplayInfoRequest"];
      };
    };
  };
}

export interface external {}
